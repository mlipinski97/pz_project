@startuml

title __PROTOBUF's Class Diagram__\n

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx {
          {static} + CLIENT_MESSAGE_ID_FIELD_NUMBER : int
          {static} + SERVER_MESSAGE_ID_FIELD_NUMBER : int
          {static} + clientMessageId : GeneratedExtension<MessageOptions, Type>
          {static} + serverMessageId : GeneratedExtension<MessageOptions, Type>
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_ClientMessages_descriptor : Descriptor
          {static} - internal_static_Mysqlx_ClientMessages_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Error_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Error_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Ok_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Ok_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_ServerMessages_descriptor : Descriptor
          {static} - internal_static_Mysqlx_ServerMessages_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - Mysqlx()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.ClientMessages {
          {static} + PARSER : Parser<ClientMessages>
          {static} - DEFAULT_INSTANCE : ClientMessages
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ClientMessages()
          - ClientMessages()
          - ClientMessages()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.ClientMessages.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        CON_CAPABILITIES_GET
        CON_CAPABILITIES_GET_VALUE
        CON_CAPABILITIES_SET
        CON_CAPABILITIES_SET_VALUE
        CON_CLOSE
        CON_CLOSE_VALUE
        CRUD_CREATE_VIEW
        CRUD_CREATE_VIEW_VALUE
        CRUD_DELETE
        CRUD_DELETE_VALUE
        CRUD_DROP_VIEW
        CRUD_DROP_VIEW_VALUE
        CRUD_FIND
        CRUD_FIND_VALUE
        CRUD_INSERT
        CRUD_INSERT_VALUE
        CRUD_MODIFY_VIEW
        CRUD_MODIFY_VIEW_VALUE
        CRUD_UPDATE
        CRUD_UPDATE_VALUE
        CURSOR_CLOSE
        CURSOR_CLOSE_VALUE
        CURSOR_FETCH
        CURSOR_FETCH_VALUE
        CURSOR_OPEN
        CURSOR_OPEN_VALUE
        EXPECT_CLOSE
        EXPECT_CLOSE_VALUE
        EXPECT_OPEN
        EXPECT_OPEN_VALUE
        PREPARE_DEALLOCATE
        PREPARE_DEALLOCATE_VALUE
        PREPARE_EXECUTE
        PREPARE_EXECUTE_VALUE
        PREPARE_PREPARE
        PREPARE_PREPARE_VALUE
        SESS_AUTHENTICATE_CONTINUE
        SESS_AUTHENTICATE_CONTINUE_VALUE
        SESS_AUTHENTICATE_START
        SESS_AUTHENTICATE_START_VALUE
        SESS_CLOSE
        SESS_CLOSE_VALUE
        SESS_RESET
        SESS_RESET_VALUE
        SQL_STMT_EXECUTE
        SQL_STMT_EXECUTE_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.Mysqlx.ClientMessagesOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.Error {
          {static} + CODE_FIELD_NUMBER : int
          {static} + MSG_FIELD_NUMBER : int
          {static} + PARSER : Parser<Error>
          {static} + SEVERITY_FIELD_NUMBER : int
          {static} + SQL_STATE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Error
          - bitField0_ : int
          - code_ : int
          - memoizedIsInitialized : byte
          - msg_ : Object
          {static} - serialVersionUID : long
          - severity_ : int
          - sqlState_ : Object
          + equals()
          + getCode()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getMsg()
          + getMsgBytes()
          + getParserForType()
          + getSerializedSize()
          + getSeverity()
          + getSqlState()
          + getSqlStateBytes()
          + getUnknownFields()
          + hasCode()
          + hasMsg()
          + hasSeverity()
          + hasSqlState()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Error()
          - Error()
          - Error()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.Error.Builder {
          - bitField0_ : int
          - code_ : int
          - msg_ : Object
          - severity_ : int
          - sqlState_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCode()
          + clearField()
          + clearMsg()
          + clearOneof()
          + clearSeverity()
          + clearSqlState()
          + clone()
          + getCode()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getMsg()
          + getMsgBytes()
          + getSeverity()
          + getSqlState()
          + getSqlStateBytes()
          + hasCode()
          + hasMsg()
          + hasSeverity()
          + hasSqlState()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCode()
          + setField()
          + setMsg()
          + setMsgBytes()
          + setRepeatedField()
          + setSeverity()
          + setSqlState()
          + setSqlStateBytes()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Severity {
        ERROR
        ERROR_VALUE
        FATAL
        FATAL_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.Mysqlx.ErrorOrBuilder {
          {abstract} + getCode()
          {abstract} + getMsg()
          {abstract} + getMsgBytes()
          {abstract} + getSeverity()
          {abstract} + getSqlState()
          {abstract} + getSqlStateBytes()
          {abstract} + hasCode()
          {abstract} + hasMsg()
          {abstract} + hasSeverity()
          {abstract} + hasSqlState()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.Ok {
          {static} + MSG_FIELD_NUMBER : int
          {static} + PARSER : Parser<Ok>
          {static} - DEFAULT_INSTANCE : Ok
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - msg_ : Object
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getMsg()
          + getMsgBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasMsg()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Ok()
          - Ok()
          - Ok()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.Ok.Builder {
          - bitField0_ : int
          - msg_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearMsg()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getMsg()
          + getMsgBytes()
          + hasMsg()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setMsg()
          + setMsgBytes()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.Mysqlx.OkOrBuilder {
          {abstract} + getMsg()
          {abstract} + getMsgBytes()
          {abstract} + hasMsg()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.ServerMessages {
          {static} + PARSER : Parser<ServerMessages>
          {static} - DEFAULT_INSTANCE : ServerMessages
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ServerMessages()
          - ServerMessages()
          - ServerMessages()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.Mysqlx.ServerMessages.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        CONN_CAPABILITIES
        CONN_CAPABILITIES_VALUE
        ERROR
        ERROR_VALUE
        NOTICE
        NOTICE_VALUE
        OK
        OK_VALUE
        RESULTSET_COLUMN_META_DATA
        RESULTSET_COLUMN_META_DATA_VALUE
        RESULTSET_FETCH_DONE
        RESULTSET_FETCH_DONE_MORE_OUT_PARAMS
        RESULTSET_FETCH_DONE_MORE_OUT_PARAMS_VALUE
        RESULTSET_FETCH_DONE_MORE_RESULTSETS
        RESULTSET_FETCH_DONE_MORE_RESULTSETS_VALUE
        RESULTSET_FETCH_DONE_VALUE
        RESULTSET_FETCH_SUSPENDED
        RESULTSET_FETCH_SUSPENDED_VALUE
        RESULTSET_ROW
        RESULTSET_ROW_VALUE
        SESS_AUTHENTICATE_CONTINUE
        SESS_AUTHENTICATE_CONTINUE_VALUE
        SESS_AUTHENTICATE_OK
        SESS_AUTHENTICATE_OK_VALUE
        SQL_STMT_EXECUTE_OK
        SQL_STMT_EXECUTE_OK_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.Mysqlx.ServerMessagesOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Connection_CapabilitiesGet_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Connection_CapabilitiesGet_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Connection_CapabilitiesSet_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Connection_CapabilitiesSet_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Connection_Capabilities_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Connection_Capabilities_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Connection_Capability_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Connection_Capability_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Connection_Close_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Connection_Close_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxConnection()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.Capabilities {
          {static} + CAPABILITIES_FIELD_NUMBER : int
          {static} + PARSER : Parser<Capabilities>
          {static} - DEFAULT_INSTANCE : Capabilities
          - capabilities_ : List<Capability>
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getCapabilities()
          + getCapabilitiesCount()
          + getCapabilitiesList()
          + getCapabilitiesOrBuilder()
          + getCapabilitiesOrBuilderList()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Capabilities()
          - Capabilities()
          - Capabilities()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.Capabilities.Builder {
          - bitField0_ : int
          - capabilitiesBuilder_ : RepeatedFieldBuilderV3<Capability, Builder, CapabilityOrBuilder>
          - capabilities_ : List<Capability>
          + addAllCapabilities()
          + addCapabilities()
          + addCapabilities()
          + addCapabilities()
          + addCapabilities()
          + addCapabilitiesBuilder()
          + addCapabilitiesBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCapabilities()
          + clearField()
          + clearOneof()
          + clone()
          + getCapabilities()
          + getCapabilitiesBuilder()
          + getCapabilitiesBuilderList()
          + getCapabilitiesCount()
          + getCapabilitiesList()
          + getCapabilitiesOrBuilder()
          + getCapabilitiesOrBuilderList()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeCapabilities()
          + setCapabilities()
          + setCapabilities()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureCapabilitiesIsMutable()
          - getCapabilitiesFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGet {
          {static} + PARSER : Parser<CapabilitiesGet>
          {static} - DEFAULT_INSTANCE : CapabilitiesGet
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - CapabilitiesGet()
          - CapabilitiesGet()
          - CapabilitiesGet()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGet.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGetOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesOrBuilder {
          {abstract} + getCapabilities()
          {abstract} + getCapabilitiesCount()
          {abstract} + getCapabilitiesList()
          {abstract} + getCapabilitiesOrBuilder()
          {abstract} + getCapabilitiesOrBuilderList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSet {
          {static} + CAPABILITIES_FIELD_NUMBER : int
          {static} + PARSER : Parser<CapabilitiesSet>
          {static} - DEFAULT_INSTANCE : CapabilitiesSet
          - bitField0_ : int
          - capabilities_ : Capabilities
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getCapabilities()
          + getCapabilitiesOrBuilder()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasCapabilities()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - CapabilitiesSet()
          - CapabilitiesSet()
          - CapabilitiesSet()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSet.Builder {
          - bitField0_ : int
          - capabilitiesBuilder_ : SingleFieldBuilderV3<Capabilities, Builder, CapabilitiesOrBuilder>
          - capabilities_ : Capabilities
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCapabilities()
          + clearField()
          + clearOneof()
          + clone()
          + getCapabilities()
          + getCapabilitiesBuilder()
          + getCapabilitiesOrBuilder()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + hasCapabilities()
          + isInitialized()
          + mergeCapabilities()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCapabilities()
          + setCapabilities()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getCapabilitiesFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSetOrBuilder {
          {abstract} + getCapabilities()
          {abstract} + getCapabilitiesOrBuilder()
          {abstract} + hasCapabilities()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.Capability {
          {static} + NAME_FIELD_NUMBER : int
          {static} + PARSER : Parser<Capability>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Capability
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - name_ : Object
          {static} - serialVersionUID : long
          - value_ : Any
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getName()
          + getNameBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + getValueOrBuilder()
          + hasName()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Capability()
          - Capability()
          - Capability()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.Capability.Builder {
          - bitField0_ : int
          - name_ : Object
          - valueBuilder_ : SingleFieldBuilderV3<Any, Builder, AnyOrBuilder>
          - value_ : Any
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearName()
          + clearOneof()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getName()
          + getNameBytes()
          + getValue()
          + getValueBuilder()
          + getValueOrBuilder()
          + hasName()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + mergeValue()
          + setField()
          + setName()
          + setNameBytes()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxConnection.CapabilityOrBuilder {
          {abstract} + getName()
          {abstract} + getNameBytes()
          {abstract} + getValue()
          {abstract} + getValueOrBuilder()
          {abstract} + hasName()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.Close {
          {static} + PARSER : Parser<Close>
          {static} - DEFAULT_INSTANCE : Close
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Close()
          - Close()
          - Close()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxConnection.Close.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxConnection.CloseOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Crud_Collection_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Collection_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Column_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Column_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_CreateView_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_CreateView_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Delete_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Delete_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_DropView_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_DropView_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Find_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Find_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Insert_TypedRow_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Insert_TypedRow_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Insert_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Insert_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_LimitExpr_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_LimitExpr_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Limit_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Limit_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_ModifyView_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_ModifyView_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Order_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Order_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Projection_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Projection_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_UpdateOperation_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_UpdateOperation_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Crud_Update_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Crud_Update_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxCrud()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Collection {
          {static} + NAME_FIELD_NUMBER : int
          {static} + PARSER : Parser<Collection>
          {static} + SCHEMA_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Collection
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - name_ : Object
          - schema_ : Object
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getName()
          + getNameBytes()
          + getParserForType()
          + getSchema()
          + getSchemaBytes()
          + getSerializedSize()
          + getUnknownFields()
          + hasName()
          + hasSchema()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Collection()
          - Collection()
          - Collection()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Collection.Builder {
          - bitField0_ : int
          - name_ : Object
          - schema_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearName()
          + clearOneof()
          + clearSchema()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getName()
          + getNameBytes()
          + getSchema()
          + getSchemaBytes()
          + hasName()
          + hasSchema()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setName()
          + setNameBytes()
          + setRepeatedField()
          + setSchema()
          + setSchemaBytes()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.CollectionOrBuilder {
          {abstract} + getName()
          {abstract} + getNameBytes()
          {abstract} + getSchema()
          {abstract} + getSchemaBytes()
          {abstract} + hasName()
          {abstract} + hasSchema()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Column {
          {static} + ALIAS_FIELD_NUMBER : int
          {static} + DOCUMENT_PATH_FIELD_NUMBER : int
          {static} + NAME_FIELD_NUMBER : int
          {static} + PARSER : Parser<Column>
          {static} - DEFAULT_INSTANCE : Column
          - alias_ : Object
          - bitField0_ : int
          - documentPath_ : List<DocumentPathItem>
          - memoizedIsInitialized : byte
          - name_ : Object
          {static} - serialVersionUID : long
          + equals()
          + getAlias()
          + getAliasBytes()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDocumentPath()
          + getDocumentPathCount()
          + getDocumentPathList()
          + getDocumentPathOrBuilder()
          + getDocumentPathOrBuilderList()
          + getName()
          + getNameBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasAlias()
          + hasName()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Column()
          - Column()
          - Column()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Column.Builder {
          - alias_ : Object
          - bitField0_ : int
          - documentPathBuilder_ : RepeatedFieldBuilderV3<DocumentPathItem, Builder, DocumentPathItemOrBuilder>
          - documentPath_ : List<DocumentPathItem>
          - name_ : Object
          + addAllDocumentPath()
          + addDocumentPath()
          + addDocumentPath()
          + addDocumentPath()
          + addDocumentPath()
          + addDocumentPathBuilder()
          + addDocumentPathBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearAlias()
          + clearDocumentPath()
          + clearField()
          + clearName()
          + clearOneof()
          + clone()
          + getAlias()
          + getAliasBytes()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getDocumentPath()
          + getDocumentPathBuilder()
          + getDocumentPathBuilderList()
          + getDocumentPathCount()
          + getDocumentPathList()
          + getDocumentPathOrBuilder()
          + getDocumentPathOrBuilderList()
          + getName()
          + getNameBytes()
          + hasAlias()
          + hasName()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeDocumentPath()
          + setAlias()
          + setAliasBytes()
          + setDocumentPath()
          + setDocumentPath()
          + setField()
          + setName()
          + setNameBytes()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureDocumentPathIsMutable()
          - getDocumentPathFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.ColumnOrBuilder {
          {abstract} + getAlias()
          {abstract} + getAliasBytes()
          {abstract} + getDocumentPath()
          {abstract} + getDocumentPathCount()
          {abstract} + getDocumentPathList()
          {abstract} + getDocumentPathOrBuilder()
          {abstract} + getDocumentPathOrBuilderList()
          {abstract} + getName()
          {abstract} + getNameBytes()
          {abstract} + hasAlias()
          {abstract} + hasName()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.CreateView {
          {static} + ALGORITHM_FIELD_NUMBER : int
          {static} + CHECK_FIELD_NUMBER : int
          {static} + COLLECTION_FIELD_NUMBER : int
          {static} + COLUMN_FIELD_NUMBER : int
          {static} + DEFINER_FIELD_NUMBER : int
          {static} + PARSER : Parser<CreateView>
          {static} + REPLACE_EXISTING_FIELD_NUMBER : int
          {static} + SECURITY_FIELD_NUMBER : int
          {static} + STMT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : CreateView
          - algorithm_ : int
          - bitField0_ : int
          - check_ : int
          - collection_ : Collection
          - column_ : LazyStringList
          - definer_ : Object
          - memoizedIsInitialized : byte
          - replaceExisting_ : boolean
          - security_ : int
          {static} - serialVersionUID : long
          - stmt_ : Find
          + equals()
          + getAlgorithm()
          + getCheck()
          + getCollection()
          + getCollectionOrBuilder()
          + getColumn()
          + getColumnBytes()
          + getColumnCount()
          + getColumnList()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          + getDefiner()
          + getDefinerBytes()
          {static} + getDescriptor()
          + getParserForType()
          + getReplaceExisting()
          + getSecurity()
          + getSerializedSize()
          + getStmt()
          + getStmtOrBuilder()
          + getUnknownFields()
          + hasAlgorithm()
          + hasCheck()
          + hasCollection()
          + hasDefiner()
          + hasReplaceExisting()
          + hasSecurity()
          + hasStmt()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - CreateView()
          - CreateView()
          - CreateView()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.CreateView.Builder {
          - algorithm_ : int
          - bitField0_ : int
          - check_ : int
          - collectionBuilder_ : SingleFieldBuilderV3<Collection, Builder, CollectionOrBuilder>
          - collection_ : Collection
          - column_ : LazyStringList
          - definer_ : Object
          - replaceExisting_ : boolean
          - security_ : int
          - stmtBuilder_ : SingleFieldBuilderV3<Find, Builder, FindOrBuilder>
          - stmt_ : Find
          + addAllColumn()
          + addColumn()
          + addColumnBytes()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearAlgorithm()
          + clearCheck()
          + clearCollection()
          + clearColumn()
          + clearDefiner()
          + clearField()
          + clearOneof()
          + clearReplaceExisting()
          + clearSecurity()
          + clearStmt()
          + clone()
          + getAlgorithm()
          + getCheck()
          + getCollection()
          + getCollectionBuilder()
          + getCollectionOrBuilder()
          + getColumn()
          + getColumnBytes()
          + getColumnCount()
          + getColumnList()
          + getDefaultInstanceForType()
          + getDefiner()
          + getDefinerBytes()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getReplaceExisting()
          + getSecurity()
          + getStmt()
          + getStmtBuilder()
          + getStmtOrBuilder()
          + hasAlgorithm()
          + hasCheck()
          + hasCollection()
          + hasDefiner()
          + hasReplaceExisting()
          + hasSecurity()
          + hasStmt()
          + isInitialized()
          + mergeCollection()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeStmt()
          + mergeUnknownFields()
          + setAlgorithm()
          + setCheck()
          + setCollection()
          + setCollection()
          + setColumn()
          + setDefiner()
          + setDefinerBytes()
          + setField()
          + setRepeatedField()
          + setReplaceExisting()
          + setSecurity()
          + setStmt()
          + setStmt()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureColumnIsMutable()
          - getCollectionFieldBuilder()
          - getStmtFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.CreateViewOrBuilder {
          {abstract} + getAlgorithm()
          {abstract} + getCheck()
          {abstract} + getCollection()
          {abstract} + getCollectionOrBuilder()
          {abstract} + getColumn()
          {abstract} + getColumnBytes()
          {abstract} + getColumnCount()
          {abstract} + getColumnList()
          {abstract} + getDefiner()
          {abstract} + getDefinerBytes()
          {abstract} + getReplaceExisting()
          {abstract} + getSecurity()
          {abstract} + getStmt()
          {abstract} + getStmtOrBuilder()
          {abstract} + hasAlgorithm()
          {abstract} + hasCheck()
          {abstract} + hasCollection()
          {abstract} + hasDefiner()
          {abstract} + hasReplaceExisting()
          {abstract} + hasSecurity()
          {abstract} + hasStmt()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum DataModel {
        DOCUMENT
        DOCUMENT_VALUE
        TABLE
        TABLE_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Delete {
          {static} + ARGS_FIELD_NUMBER : int
          {static} + COLLECTION_FIELD_NUMBER : int
          {static} + CRITERIA_FIELD_NUMBER : int
          {static} + DATA_MODEL_FIELD_NUMBER : int
          {static} + LIMIT_EXPR_FIELD_NUMBER : int
          {static} + LIMIT_FIELD_NUMBER : int
          {static} + ORDER_FIELD_NUMBER : int
          {static} + PARSER : Parser<Delete>
          {static} - DEFAULT_INSTANCE : Delete
          - args_ : List<Scalar>
          - bitField0_ : int
          - collection_ : Collection
          - criteria_ : Expr
          - dataModel_ : int
          - limitExpr_ : LimitExpr
          - limit_ : Limit
          - memoizedIsInitialized : byte
          - order_ : List<Order>
          {static} - serialVersionUID : long
          + equals()
          + getArgs()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionOrBuilder()
          + getCriteria()
          + getCriteriaOrBuilder()
          + getDataModel()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getLimit()
          + getLimitExpr()
          + getLimitExprOrBuilder()
          + getLimitOrBuilder()
          + getOrder()
          + getOrderCount()
          + getOrderList()
          + getOrderOrBuilder()
          + getOrderOrBuilderList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasCollection()
          + hasCriteria()
          + hasDataModel()
          + hasLimit()
          + hasLimitExpr()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Delete()
          - Delete()
          - Delete()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Delete.Builder {
          - argsBuilder_ : RepeatedFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - args_ : List<Scalar>
          - bitField0_ : int
          - collectionBuilder_ : SingleFieldBuilderV3<Collection, Builder, CollectionOrBuilder>
          - collection_ : Collection
          - criteriaBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - criteria_ : Expr
          - dataModel_ : int
          - limitBuilder_ : SingleFieldBuilderV3<Limit, Builder, LimitOrBuilder>
          - limitExprBuilder_ : SingleFieldBuilderV3<LimitExpr, Builder, LimitExprOrBuilder>
          - limitExpr_ : LimitExpr
          - limit_ : Limit
          - orderBuilder_ : RepeatedFieldBuilderV3<Order, Builder, OrderOrBuilder>
          - order_ : List<Order>
          + addAllArgs()
          + addAllOrder()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgsBuilder()
          + addArgsBuilder()
          + addOrder()
          + addOrder()
          + addOrder()
          + addOrder()
          + addOrderBuilder()
          + addOrderBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearArgs()
          + clearCollection()
          + clearCriteria()
          + clearDataModel()
          + clearField()
          + clearLimit()
          + clearLimitExpr()
          + clearOneof()
          + clearOrder()
          + clone()
          + getArgs()
          + getArgsBuilder()
          + getArgsBuilderList()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionBuilder()
          + getCollectionOrBuilder()
          + getCriteria()
          + getCriteriaBuilder()
          + getCriteriaOrBuilder()
          + getDataModel()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getLimit()
          + getLimitBuilder()
          + getLimitExpr()
          + getLimitExprBuilder()
          + getLimitExprOrBuilder()
          + getLimitOrBuilder()
          + getOrder()
          + getOrderBuilder()
          + getOrderBuilderList()
          + getOrderCount()
          + getOrderList()
          + getOrderOrBuilder()
          + getOrderOrBuilderList()
          + hasCollection()
          + hasCriteria()
          + hasDataModel()
          + hasLimit()
          + hasLimitExpr()
          + isInitialized()
          + mergeCollection()
          + mergeCriteria()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeLimit()
          + mergeLimitExpr()
          + mergeUnknownFields()
          + removeArgs()
          + removeOrder()
          + setArgs()
          + setArgs()
          + setCollection()
          + setCollection()
          + setCriteria()
          + setCriteria()
          + setDataModel()
          + setField()
          + setLimit()
          + setLimit()
          + setLimitExpr()
          + setLimitExpr()
          + setOrder()
          + setOrder()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureArgsIsMutable()
          - ensureOrderIsMutable()
          - getArgsFieldBuilder()
          - getCollectionFieldBuilder()
          - getCriteriaFieldBuilder()
          - getLimitExprFieldBuilder()
          - getLimitFieldBuilder()
          - getOrderFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.DeleteOrBuilder {
          {abstract} + getArgs()
          {abstract} + getArgsCount()
          {abstract} + getArgsList()
          {abstract} + getArgsOrBuilder()
          {abstract} + getArgsOrBuilderList()
          {abstract} + getCollection()
          {abstract} + getCollectionOrBuilder()
          {abstract} + getCriteria()
          {abstract} + getCriteriaOrBuilder()
          {abstract} + getDataModel()
          {abstract} + getLimit()
          {abstract} + getLimitExpr()
          {abstract} + getLimitExprOrBuilder()
          {abstract} + getLimitOrBuilder()
          {abstract} + getOrder()
          {abstract} + getOrderCount()
          {abstract} + getOrderList()
          {abstract} + getOrderOrBuilder()
          {abstract} + getOrderOrBuilderList()
          {abstract} + hasCollection()
          {abstract} + hasCriteria()
          {abstract} + hasDataModel()
          {abstract} + hasLimit()
          {abstract} + hasLimitExpr()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.DropView {
          {static} + COLLECTION_FIELD_NUMBER : int
          {static} + IF_EXISTS_FIELD_NUMBER : int
          {static} + PARSER : Parser<DropView>
          {static} - DEFAULT_INSTANCE : DropView
          - bitField0_ : int
          - collection_ : Collection
          - ifExists_ : boolean
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getCollection()
          + getCollectionOrBuilder()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getIfExists()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasCollection()
          + hasIfExists()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - DropView()
          - DropView()
          - DropView()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.DropView.Builder {
          - bitField0_ : int
          - collectionBuilder_ : SingleFieldBuilderV3<Collection, Builder, CollectionOrBuilder>
          - collection_ : Collection
          - ifExists_ : boolean
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCollection()
          + clearField()
          + clearIfExists()
          + clearOneof()
          + clone()
          + getCollection()
          + getCollectionBuilder()
          + getCollectionOrBuilder()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getIfExists()
          + hasCollection()
          + hasIfExists()
          + isInitialized()
          + mergeCollection()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCollection()
          + setCollection()
          + setField()
          + setIfExists()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getCollectionFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.DropViewOrBuilder {
          {abstract} + getCollection()
          {abstract} + getCollectionOrBuilder()
          {abstract} + getIfExists()
          {abstract} + hasCollection()
          {abstract} + hasIfExists()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Find {
          {static} + ARGS_FIELD_NUMBER : int
          {static} + COLLECTION_FIELD_NUMBER : int
          {static} + CRITERIA_FIELD_NUMBER : int
          {static} + DATA_MODEL_FIELD_NUMBER : int
          {static} + GROUPING_CRITERIA_FIELD_NUMBER : int
          {static} + GROUPING_FIELD_NUMBER : int
          {static} + LIMIT_EXPR_FIELD_NUMBER : int
          {static} + LIMIT_FIELD_NUMBER : int
          {static} + LOCKING_FIELD_NUMBER : int
          {static} + LOCKING_OPTIONS_FIELD_NUMBER : int
          {static} + ORDER_FIELD_NUMBER : int
          {static} + PARSER : Parser<Find>
          {static} + PROJECTION_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Find
          - args_ : List<Scalar>
          - bitField0_ : int
          - collection_ : Collection
          - criteria_ : Expr
          - dataModel_ : int
          - groupingCriteria_ : Expr
          - grouping_ : List<Expr>
          - limitExpr_ : LimitExpr
          - limit_ : Limit
          - lockingOptions_ : int
          - locking_ : int
          - memoizedIsInitialized : byte
          - order_ : List<Order>
          - projection_ : List<Projection>
          {static} - serialVersionUID : long
          + equals()
          + getArgs()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionOrBuilder()
          + getCriteria()
          + getCriteriaOrBuilder()
          + getDataModel()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getGrouping()
          + getGroupingCount()
          + getGroupingCriteria()
          + getGroupingCriteriaOrBuilder()
          + getGroupingList()
          + getGroupingOrBuilder()
          + getGroupingOrBuilderList()
          + getLimit()
          + getLimitExpr()
          + getLimitExprOrBuilder()
          + getLimitOrBuilder()
          + getLocking()
          + getLockingOptions()
          + getOrder()
          + getOrderCount()
          + getOrderList()
          + getOrderOrBuilder()
          + getOrderOrBuilderList()
          + getParserForType()
          + getProjection()
          + getProjectionCount()
          + getProjectionList()
          + getProjectionOrBuilder()
          + getProjectionOrBuilderList()
          + getSerializedSize()
          + getUnknownFields()
          + hasCollection()
          + hasCriteria()
          + hasDataModel()
          + hasGroupingCriteria()
          + hasLimit()
          + hasLimitExpr()
          + hasLocking()
          + hasLockingOptions()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Find()
          - Find()
          - Find()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Find.Builder {
          - argsBuilder_ : RepeatedFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - args_ : List<Scalar>
          - bitField0_ : int
          - collectionBuilder_ : SingleFieldBuilderV3<Collection, Builder, CollectionOrBuilder>
          - collection_ : Collection
          - criteriaBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - criteria_ : Expr
          - dataModel_ : int
          - groupingBuilder_ : RepeatedFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - groupingCriteriaBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - groupingCriteria_ : Expr
          - grouping_ : List<Expr>
          - limitBuilder_ : SingleFieldBuilderV3<Limit, Builder, LimitOrBuilder>
          - limitExprBuilder_ : SingleFieldBuilderV3<LimitExpr, Builder, LimitExprOrBuilder>
          - limitExpr_ : LimitExpr
          - limit_ : Limit
          - lockingOptions_ : int
          - locking_ : int
          - orderBuilder_ : RepeatedFieldBuilderV3<Order, Builder, OrderOrBuilder>
          - order_ : List<Order>
          - projectionBuilder_ : RepeatedFieldBuilderV3<Projection, Builder, ProjectionOrBuilder>
          - projection_ : List<Projection>
          + addAllArgs()
          + addAllGrouping()
          + addAllOrder()
          + addAllProjection()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgsBuilder()
          + addArgsBuilder()
          + addGrouping()
          + addGrouping()
          + addGrouping()
          + addGrouping()
          + addGroupingBuilder()
          + addGroupingBuilder()
          + addOrder()
          + addOrder()
          + addOrder()
          + addOrder()
          + addOrderBuilder()
          + addOrderBuilder()
          + addProjection()
          + addProjection()
          + addProjection()
          + addProjection()
          + addProjectionBuilder()
          + addProjectionBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearArgs()
          + clearCollection()
          + clearCriteria()
          + clearDataModel()
          + clearField()
          + clearGrouping()
          + clearGroupingCriteria()
          + clearLimit()
          + clearLimitExpr()
          + clearLocking()
          + clearLockingOptions()
          + clearOneof()
          + clearOrder()
          + clearProjection()
          + clone()
          + getArgs()
          + getArgsBuilder()
          + getArgsBuilderList()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionBuilder()
          + getCollectionOrBuilder()
          + getCriteria()
          + getCriteriaBuilder()
          + getCriteriaOrBuilder()
          + getDataModel()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getGrouping()
          + getGroupingBuilder()
          + getGroupingBuilderList()
          + getGroupingCount()
          + getGroupingCriteria()
          + getGroupingCriteriaBuilder()
          + getGroupingCriteriaOrBuilder()
          + getGroupingList()
          + getGroupingOrBuilder()
          + getGroupingOrBuilderList()
          + getLimit()
          + getLimitBuilder()
          + getLimitExpr()
          + getLimitExprBuilder()
          + getLimitExprOrBuilder()
          + getLimitOrBuilder()
          + getLocking()
          + getLockingOptions()
          + getOrder()
          + getOrderBuilder()
          + getOrderBuilderList()
          + getOrderCount()
          + getOrderList()
          + getOrderOrBuilder()
          + getOrderOrBuilderList()
          + getProjection()
          + getProjectionBuilder()
          + getProjectionBuilderList()
          + getProjectionCount()
          + getProjectionList()
          + getProjectionOrBuilder()
          + getProjectionOrBuilderList()
          + hasCollection()
          + hasCriteria()
          + hasDataModel()
          + hasGroupingCriteria()
          + hasLimit()
          + hasLimitExpr()
          + hasLocking()
          + hasLockingOptions()
          + isInitialized()
          + mergeCollection()
          + mergeCriteria()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeGroupingCriteria()
          + mergeLimit()
          + mergeLimitExpr()
          + mergeUnknownFields()
          + removeArgs()
          + removeGrouping()
          + removeOrder()
          + removeProjection()
          + setArgs()
          + setArgs()
          + setCollection()
          + setCollection()
          + setCriteria()
          + setCriteria()
          + setDataModel()
          + setField()
          + setGrouping()
          + setGrouping()
          + setGroupingCriteria()
          + setGroupingCriteria()
          + setLimit()
          + setLimit()
          + setLimitExpr()
          + setLimitExpr()
          + setLocking()
          + setLockingOptions()
          + setOrder()
          + setOrder()
          + setProjection()
          + setProjection()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureArgsIsMutable()
          - ensureGroupingIsMutable()
          - ensureOrderIsMutable()
          - ensureProjectionIsMutable()
          - getArgsFieldBuilder()
          - getCollectionFieldBuilder()
          - getCriteriaFieldBuilder()
          - getGroupingCriteriaFieldBuilder()
          - getGroupingFieldBuilder()
          - getLimitExprFieldBuilder()
          - getLimitFieldBuilder()
          - getOrderFieldBuilder()
          - getProjectionFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum RowLock {
        EXCLUSIVE_LOCK
        EXCLUSIVE_LOCK_VALUE
        SHARED_LOCK
        SHARED_LOCK_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum RowLockOptions {
        NOWAIT
        NOWAIT_VALUE
        SKIP_LOCKED
        SKIP_LOCKED_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.FindOrBuilder {
          {abstract} + getArgs()
          {abstract} + getArgsCount()
          {abstract} + getArgsList()
          {abstract} + getArgsOrBuilder()
          {abstract} + getArgsOrBuilderList()
          {abstract} + getCollection()
          {abstract} + getCollectionOrBuilder()
          {abstract} + getCriteria()
          {abstract} + getCriteriaOrBuilder()
          {abstract} + getDataModel()
          {abstract} + getGrouping()
          {abstract} + getGroupingCount()
          {abstract} + getGroupingCriteria()
          {abstract} + getGroupingCriteriaOrBuilder()
          {abstract} + getGroupingList()
          {abstract} + getGroupingOrBuilder()
          {abstract} + getGroupingOrBuilderList()
          {abstract} + getLimit()
          {abstract} + getLimitExpr()
          {abstract} + getLimitExprOrBuilder()
          {abstract} + getLimitOrBuilder()
          {abstract} + getLocking()
          {abstract} + getLockingOptions()
          {abstract} + getOrder()
          {abstract} + getOrderCount()
          {abstract} + getOrderList()
          {abstract} + getOrderOrBuilder()
          {abstract} + getOrderOrBuilderList()
          {abstract} + getProjection()
          {abstract} + getProjectionCount()
          {abstract} + getProjectionList()
          {abstract} + getProjectionOrBuilder()
          {abstract} + getProjectionOrBuilderList()
          {abstract} + hasCollection()
          {abstract} + hasCriteria()
          {abstract} + hasDataModel()
          {abstract} + hasGroupingCriteria()
          {abstract} + hasLimit()
          {abstract} + hasLimitExpr()
          {abstract} + hasLocking()
          {abstract} + hasLockingOptions()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Insert {
          {static} + ARGS_FIELD_NUMBER : int
          {static} + COLLECTION_FIELD_NUMBER : int
          {static} + DATA_MODEL_FIELD_NUMBER : int
          {static} + PARSER : Parser<Insert>
          {static} + PROJECTION_FIELD_NUMBER : int
          {static} + ROW_FIELD_NUMBER : int
          {static} + UPSERT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Insert
          - args_ : List<Scalar>
          - bitField0_ : int
          - collection_ : Collection
          - dataModel_ : int
          - memoizedIsInitialized : byte
          - projection_ : List<Column>
          - row_ : List<TypedRow>
          {static} - serialVersionUID : long
          - upsert_ : boolean
          + equals()
          + getArgs()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionOrBuilder()
          + getDataModel()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getProjection()
          + getProjectionCount()
          + getProjectionList()
          + getProjectionOrBuilder()
          + getProjectionOrBuilderList()
          + getRow()
          + getRowCount()
          + getRowList()
          + getRowOrBuilder()
          + getRowOrBuilderList()
          + getSerializedSize()
          + getUnknownFields()
          + getUpsert()
          + hasCollection()
          + hasDataModel()
          + hasUpsert()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Insert()
          - Insert()
          - Insert()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Insert.Builder {
          - argsBuilder_ : RepeatedFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - args_ : List<Scalar>
          - bitField0_ : int
          - collectionBuilder_ : SingleFieldBuilderV3<Collection, Builder, CollectionOrBuilder>
          - collection_ : Collection
          - dataModel_ : int
          - projectionBuilder_ : RepeatedFieldBuilderV3<Column, Builder, ColumnOrBuilder>
          - projection_ : List<Column>
          - rowBuilder_ : RepeatedFieldBuilderV3<TypedRow, Builder, TypedRowOrBuilder>
          - row_ : List<TypedRow>
          - upsert_ : boolean
          + addAllArgs()
          + addAllProjection()
          + addAllRow()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgsBuilder()
          + addArgsBuilder()
          + addProjection()
          + addProjection()
          + addProjection()
          + addProjection()
          + addProjectionBuilder()
          + addProjectionBuilder()
          + addRepeatedField()
          + addRow()
          + addRow()
          + addRow()
          + addRow()
          + addRowBuilder()
          + addRowBuilder()
          + build()
          + buildPartial()
          + clear()
          + clearArgs()
          + clearCollection()
          + clearDataModel()
          + clearField()
          + clearOneof()
          + clearProjection()
          + clearRow()
          + clearUpsert()
          + clone()
          + getArgs()
          + getArgsBuilder()
          + getArgsBuilderList()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionBuilder()
          + getCollectionOrBuilder()
          + getDataModel()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getProjection()
          + getProjectionBuilder()
          + getProjectionBuilderList()
          + getProjectionCount()
          + getProjectionList()
          + getProjectionOrBuilder()
          + getProjectionOrBuilderList()
          + getRow()
          + getRowBuilder()
          + getRowBuilderList()
          + getRowCount()
          + getRowList()
          + getRowOrBuilder()
          + getRowOrBuilderList()
          + getUpsert()
          + hasCollection()
          + hasDataModel()
          + hasUpsert()
          + isInitialized()
          + mergeCollection()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeArgs()
          + removeProjection()
          + removeRow()
          + setArgs()
          + setArgs()
          + setCollection()
          + setCollection()
          + setDataModel()
          + setField()
          + setProjection()
          + setProjection()
          + setRepeatedField()
          + setRow()
          + setRow()
          + setUnknownFields()
          + setUpsert()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureArgsIsMutable()
          - ensureProjectionIsMutable()
          - ensureRowIsMutable()
          - getArgsFieldBuilder()
          - getCollectionFieldBuilder()
          - getProjectionFieldBuilder()
          - getRowFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRow {
          {static} + FIELD_FIELD_NUMBER : int
          {static} + PARSER : Parser<TypedRow>
          {static} - DEFAULT_INSTANCE : TypedRow
          - field_ : List<Expr>
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getField()
          + getFieldCount()
          + getFieldList()
          + getFieldOrBuilder()
          + getFieldOrBuilderList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - TypedRow()
          - TypedRow()
          - TypedRow()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRow.Builder {
          - bitField0_ : int
          - fieldBuilder_ : RepeatedFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - field_ : List<Expr>
          + addAllField()
          + addField()
          + addField()
          + addField()
          + addField()
          + addFieldBuilder()
          + addFieldBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getField()
          + getFieldBuilder()
          + getFieldBuilderList()
          + getFieldCount()
          + getFieldList()
          + getFieldOrBuilder()
          + getFieldOrBuilderList()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeField()
          + setField()
          + setField()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureFieldIsMutable()
          - getFieldFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRowOrBuilder {
          {abstract} + getField()
          {abstract} + getFieldCount()
          {abstract} + getFieldList()
          {abstract} + getFieldOrBuilder()
          {abstract} + getFieldOrBuilderList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.InsertOrBuilder {
          {abstract} + getArgs()
          {abstract} + getArgsCount()
          {abstract} + getArgsList()
          {abstract} + getArgsOrBuilder()
          {abstract} + getArgsOrBuilderList()
          {abstract} + getCollection()
          {abstract} + getCollectionOrBuilder()
          {abstract} + getDataModel()
          {abstract} + getProjection()
          {abstract} + getProjectionCount()
          {abstract} + getProjectionList()
          {abstract} + getProjectionOrBuilder()
          {abstract} + getProjectionOrBuilderList()
          {abstract} + getRow()
          {abstract} + getRowCount()
          {abstract} + getRowList()
          {abstract} + getRowOrBuilder()
          {abstract} + getRowOrBuilderList()
          {abstract} + getUpsert()
          {abstract} + hasCollection()
          {abstract} + hasDataModel()
          {abstract} + hasUpsert()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Limit {
          {static} + OFFSET_FIELD_NUMBER : int
          {static} + PARSER : Parser<Limit>
          {static} + ROW_COUNT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Limit
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - offset_ : long
          - rowCount_ : long
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getOffset()
          + getParserForType()
          + getRowCount()
          + getSerializedSize()
          + getUnknownFields()
          + hasOffset()
          + hasRowCount()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Limit()
          - Limit()
          - Limit()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Limit.Builder {
          - bitField0_ : int
          - offset_ : long
          - rowCount_ : long
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOffset()
          + clearOneof()
          + clearRowCount()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getOffset()
          + getRowCount()
          + hasOffset()
          + hasRowCount()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setOffset()
          + setRepeatedField()
          + setRowCount()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.LimitExpr {
          {static} + OFFSET_FIELD_NUMBER : int
          {static} + PARSER : Parser<LimitExpr>
          {static} + ROW_COUNT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : LimitExpr
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - offset_ : Expr
          - rowCount_ : Expr
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getOffset()
          + getOffsetOrBuilder()
          + getParserForType()
          + getRowCount()
          + getRowCountOrBuilder()
          + getSerializedSize()
          + getUnknownFields()
          + hasOffset()
          + hasRowCount()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - LimitExpr()
          - LimitExpr()
          - LimitExpr()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.LimitExpr.Builder {
          - bitField0_ : int
          - offsetBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - offset_ : Expr
          - rowCountBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - rowCount_ : Expr
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOffset()
          + clearOneof()
          + clearRowCount()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getOffset()
          + getOffsetBuilder()
          + getOffsetOrBuilder()
          + getRowCount()
          + getRowCountBuilder()
          + getRowCountOrBuilder()
          + hasOffset()
          + hasRowCount()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeOffset()
          + mergeRowCount()
          + mergeUnknownFields()
          + setField()
          + setOffset()
          + setOffset()
          + setRepeatedField()
          + setRowCount()
          + setRowCount()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getOffsetFieldBuilder()
          - getRowCountFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.LimitExprOrBuilder {
          {abstract} + getOffset()
          {abstract} + getOffsetOrBuilder()
          {abstract} + getRowCount()
          {abstract} + getRowCountOrBuilder()
          {abstract} + hasOffset()
          {abstract} + hasRowCount()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.LimitOrBuilder {
          {abstract} + getOffset()
          {abstract} + getRowCount()
          {abstract} + hasOffset()
          {abstract} + hasRowCount()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.ModifyView {
          {static} + ALGORITHM_FIELD_NUMBER : int
          {static} + CHECK_FIELD_NUMBER : int
          {static} + COLLECTION_FIELD_NUMBER : int
          {static} + COLUMN_FIELD_NUMBER : int
          {static} + DEFINER_FIELD_NUMBER : int
          {static} + PARSER : Parser<ModifyView>
          {static} + SECURITY_FIELD_NUMBER : int
          {static} + STMT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : ModifyView
          - algorithm_ : int
          - bitField0_ : int
          - check_ : int
          - collection_ : Collection
          - column_ : LazyStringList
          - definer_ : Object
          - memoizedIsInitialized : byte
          - security_ : int
          {static} - serialVersionUID : long
          - stmt_ : Find
          + equals()
          + getAlgorithm()
          + getCheck()
          + getCollection()
          + getCollectionOrBuilder()
          + getColumn()
          + getColumnBytes()
          + getColumnCount()
          + getColumnList()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          + getDefiner()
          + getDefinerBytes()
          {static} + getDescriptor()
          + getParserForType()
          + getSecurity()
          + getSerializedSize()
          + getStmt()
          + getStmtOrBuilder()
          + getUnknownFields()
          + hasAlgorithm()
          + hasCheck()
          + hasCollection()
          + hasDefiner()
          + hasSecurity()
          + hasStmt()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ModifyView()
          - ModifyView()
          - ModifyView()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.ModifyView.Builder {
          - algorithm_ : int
          - bitField0_ : int
          - check_ : int
          - collectionBuilder_ : SingleFieldBuilderV3<Collection, Builder, CollectionOrBuilder>
          - collection_ : Collection
          - column_ : LazyStringList
          - definer_ : Object
          - security_ : int
          - stmtBuilder_ : SingleFieldBuilderV3<Find, Builder, FindOrBuilder>
          - stmt_ : Find
          + addAllColumn()
          + addColumn()
          + addColumnBytes()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearAlgorithm()
          + clearCheck()
          + clearCollection()
          + clearColumn()
          + clearDefiner()
          + clearField()
          + clearOneof()
          + clearSecurity()
          + clearStmt()
          + clone()
          + getAlgorithm()
          + getCheck()
          + getCollection()
          + getCollectionBuilder()
          + getCollectionOrBuilder()
          + getColumn()
          + getColumnBytes()
          + getColumnCount()
          + getColumnList()
          + getDefaultInstanceForType()
          + getDefiner()
          + getDefinerBytes()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getSecurity()
          + getStmt()
          + getStmtBuilder()
          + getStmtOrBuilder()
          + hasAlgorithm()
          + hasCheck()
          + hasCollection()
          + hasDefiner()
          + hasSecurity()
          + hasStmt()
          + isInitialized()
          + mergeCollection()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeStmt()
          + mergeUnknownFields()
          + setAlgorithm()
          + setCheck()
          + setCollection()
          + setCollection()
          + setColumn()
          + setDefiner()
          + setDefinerBytes()
          + setField()
          + setRepeatedField()
          + setSecurity()
          + setStmt()
          + setStmt()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureColumnIsMutable()
          - getCollectionFieldBuilder()
          - getStmtFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.ModifyViewOrBuilder {
          {abstract} + getAlgorithm()
          {abstract} + getCheck()
          {abstract} + getCollection()
          {abstract} + getCollectionOrBuilder()
          {abstract} + getColumn()
          {abstract} + getColumnBytes()
          {abstract} + getColumnCount()
          {abstract} + getColumnList()
          {abstract} + getDefiner()
          {abstract} + getDefinerBytes()
          {abstract} + getSecurity()
          {abstract} + getStmt()
          {abstract} + getStmtOrBuilder()
          {abstract} + hasAlgorithm()
          {abstract} + hasCheck()
          {abstract} + hasCollection()
          {abstract} + hasDefiner()
          {abstract} + hasSecurity()
          {abstract} + hasStmt()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Order {
          {static} + DIRECTION_FIELD_NUMBER : int
          {static} + EXPR_FIELD_NUMBER : int
          {static} + PARSER : Parser<Order>
          {static} - DEFAULT_INSTANCE : Order
          - bitField0_ : int
          - direction_ : int
          - expr_ : Expr
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDirection()
          + getExpr()
          + getExprOrBuilder()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasDirection()
          + hasExpr()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Order()
          - Order()
          - Order()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Order.Builder {
          - bitField0_ : int
          - direction_ : int
          - exprBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - expr_ : Expr
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearDirection()
          + clearExpr()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getDirection()
          + getExpr()
          + getExprBuilder()
          + getExprOrBuilder()
          + hasDirection()
          + hasExpr()
          + isInitialized()
          + mergeExpr()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setDirection()
          + setExpr()
          + setExpr()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getExprFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Direction {
        ASC
        ASC_VALUE
        DESC
        DESC_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.OrderOrBuilder {
          {abstract} + getDirection()
          {abstract} + getExpr()
          {abstract} + getExprOrBuilder()
          {abstract} + hasDirection()
          {abstract} + hasExpr()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Projection {
          {static} + ALIAS_FIELD_NUMBER : int
          {static} + PARSER : Parser<Projection>
          {static} + SOURCE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Projection
          - alias_ : Object
          - bitField0_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - source_ : Expr
          + equals()
          + getAlias()
          + getAliasBytes()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getSource()
          + getSourceOrBuilder()
          + getUnknownFields()
          + hasAlias()
          + hasSource()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Projection()
          - Projection()
          - Projection()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Projection.Builder {
          - alias_ : Object
          - bitField0_ : int
          - sourceBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - source_ : Expr
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearAlias()
          + clearField()
          + clearOneof()
          + clearSource()
          + clone()
          + getAlias()
          + getAliasBytes()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getSource()
          + getSourceBuilder()
          + getSourceOrBuilder()
          + hasAlias()
          + hasSource()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeSource()
          + mergeUnknownFields()
          + setAlias()
          + setAliasBytes()
          + setField()
          + setRepeatedField()
          + setSource()
          + setSource()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getSourceFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.ProjectionOrBuilder {
          {abstract} + getAlias()
          {abstract} + getAliasBytes()
          {abstract} + getSource()
          {abstract} + getSourceOrBuilder()
          {abstract} + hasAlias()
          {abstract} + hasSource()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Update {
          {static} + ARGS_FIELD_NUMBER : int
          {static} + COLLECTION_FIELD_NUMBER : int
          {static} + CRITERIA_FIELD_NUMBER : int
          {static} + DATA_MODEL_FIELD_NUMBER : int
          {static} + LIMIT_EXPR_FIELD_NUMBER : int
          {static} + LIMIT_FIELD_NUMBER : int
          {static} + OPERATION_FIELD_NUMBER : int
          {static} + ORDER_FIELD_NUMBER : int
          {static} + PARSER : Parser<Update>
          {static} - DEFAULT_INSTANCE : Update
          - args_ : List<Scalar>
          - bitField0_ : int
          - collection_ : Collection
          - criteria_ : Expr
          - dataModel_ : int
          - limitExpr_ : LimitExpr
          - limit_ : Limit
          - memoizedIsInitialized : byte
          - operation_ : List<UpdateOperation>
          - order_ : List<Order>
          {static} - serialVersionUID : long
          + equals()
          + getArgs()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionOrBuilder()
          + getCriteria()
          + getCriteriaOrBuilder()
          + getDataModel()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getLimit()
          + getLimitExpr()
          + getLimitExprOrBuilder()
          + getLimitOrBuilder()
          + getOperation()
          + getOperationCount()
          + getOperationList()
          + getOperationOrBuilder()
          + getOperationOrBuilderList()
          + getOrder()
          + getOrderCount()
          + getOrderList()
          + getOrderOrBuilder()
          + getOrderOrBuilderList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasCollection()
          + hasCriteria()
          + hasDataModel()
          + hasLimit()
          + hasLimitExpr()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Update()
          - Update()
          - Update()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.Update.Builder {
          - argsBuilder_ : RepeatedFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - args_ : List<Scalar>
          - bitField0_ : int
          - collectionBuilder_ : SingleFieldBuilderV3<Collection, Builder, CollectionOrBuilder>
          - collection_ : Collection
          - criteriaBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - criteria_ : Expr
          - dataModel_ : int
          - limitBuilder_ : SingleFieldBuilderV3<Limit, Builder, LimitOrBuilder>
          - limitExprBuilder_ : SingleFieldBuilderV3<LimitExpr, Builder, LimitExprOrBuilder>
          - limitExpr_ : LimitExpr
          - limit_ : Limit
          - operationBuilder_ : RepeatedFieldBuilderV3<UpdateOperation, Builder, UpdateOperationOrBuilder>
          - operation_ : List<UpdateOperation>
          - orderBuilder_ : RepeatedFieldBuilderV3<Order, Builder, OrderOrBuilder>
          - order_ : List<Order>
          + addAllArgs()
          + addAllOperation()
          + addAllOrder()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgsBuilder()
          + addArgsBuilder()
          + addOperation()
          + addOperation()
          + addOperation()
          + addOperation()
          + addOperationBuilder()
          + addOperationBuilder()
          + addOrder()
          + addOrder()
          + addOrder()
          + addOrder()
          + addOrderBuilder()
          + addOrderBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearArgs()
          + clearCollection()
          + clearCriteria()
          + clearDataModel()
          + clearField()
          + clearLimit()
          + clearLimitExpr()
          + clearOneof()
          + clearOperation()
          + clearOrder()
          + clone()
          + getArgs()
          + getArgsBuilder()
          + getArgsBuilderList()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCollection()
          + getCollectionBuilder()
          + getCollectionOrBuilder()
          + getCriteria()
          + getCriteriaBuilder()
          + getCriteriaOrBuilder()
          + getDataModel()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getLimit()
          + getLimitBuilder()
          + getLimitExpr()
          + getLimitExprBuilder()
          + getLimitExprOrBuilder()
          + getLimitOrBuilder()
          + getOperation()
          + getOperationBuilder()
          + getOperationBuilderList()
          + getOperationCount()
          + getOperationList()
          + getOperationOrBuilder()
          + getOperationOrBuilderList()
          + getOrder()
          + getOrderBuilder()
          + getOrderBuilderList()
          + getOrderCount()
          + getOrderList()
          + getOrderOrBuilder()
          + getOrderOrBuilderList()
          + hasCollection()
          + hasCriteria()
          + hasDataModel()
          + hasLimit()
          + hasLimitExpr()
          + isInitialized()
          + mergeCollection()
          + mergeCriteria()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeLimit()
          + mergeLimitExpr()
          + mergeUnknownFields()
          + removeArgs()
          + removeOperation()
          + removeOrder()
          + setArgs()
          + setArgs()
          + setCollection()
          + setCollection()
          + setCriteria()
          + setCriteria()
          + setDataModel()
          + setField()
          + setLimit()
          + setLimit()
          + setLimitExpr()
          + setLimitExpr()
          + setOperation()
          + setOperation()
          + setOrder()
          + setOrder()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureArgsIsMutable()
          - ensureOperationIsMutable()
          - ensureOrderIsMutable()
          - getArgsFieldBuilder()
          - getCollectionFieldBuilder()
          - getCriteriaFieldBuilder()
          - getLimitExprFieldBuilder()
          - getLimitFieldBuilder()
          - getOperationFieldBuilder()
          - getOrderFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation {
          {static} + OPERATION_FIELD_NUMBER : int
          {static} + PARSER : Parser<UpdateOperation>
          {static} + SOURCE_FIELD_NUMBER : int
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : UpdateOperation
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - operation_ : int
          {static} - serialVersionUID : long
          - source_ : ColumnIdentifier
          - value_ : Expr
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getOperation()
          + getParserForType()
          + getSerializedSize()
          + getSource()
          + getSourceOrBuilder()
          + getUnknownFields()
          + getValue()
          + getValueOrBuilder()
          + hasOperation()
          + hasSource()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - UpdateOperation()
          - UpdateOperation()
          - UpdateOperation()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation.Builder {
          - bitField0_ : int
          - operation_ : int
          - sourceBuilder_ : SingleFieldBuilderV3<ColumnIdentifier, Builder, ColumnIdentifierOrBuilder>
          - source_ : ColumnIdentifier
          - valueBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - value_ : Expr
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearOperation()
          + clearSource()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getOperation()
          + getSource()
          + getSourceBuilder()
          + getSourceOrBuilder()
          + getValue()
          + getValueBuilder()
          + getValueOrBuilder()
          + hasOperation()
          + hasSource()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeSource()
          + mergeUnknownFields()
          + mergeValue()
          + setField()
          + setOperation()
          + setRepeatedField()
          + setSource()
          + setSource()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getSourceFieldBuilder()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum UpdateType {
        ARRAY_APPEND
        ARRAY_APPEND_VALUE
        ARRAY_INSERT
        ARRAY_INSERT_VALUE
        ITEM_MERGE
        ITEM_MERGE_VALUE
        ITEM_REMOVE
        ITEM_REMOVE_VALUE
        ITEM_REPLACE
        ITEM_REPLACE_VALUE
        ITEM_SET
        ITEM_SET_VALUE
        MERGE_PATCH
        MERGE_PATCH_VALUE
        SET
        SET_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperationOrBuilder {
          {abstract} + getOperation()
          {abstract} + getSource()
          {abstract} + getSourceOrBuilder()
          {abstract} + getValue()
          {abstract} + getValueOrBuilder()
          {abstract} + hasOperation()
          {abstract} + hasSource()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOrBuilder {
          {abstract} + getArgs()
          {abstract} + getArgsCount()
          {abstract} + getArgsList()
          {abstract} + getArgsOrBuilder()
          {abstract} + getArgsOrBuilderList()
          {abstract} + getCollection()
          {abstract} + getCollectionOrBuilder()
          {abstract} + getCriteria()
          {abstract} + getCriteriaOrBuilder()
          {abstract} + getDataModel()
          {abstract} + getLimit()
          {abstract} + getLimitExpr()
          {abstract} + getLimitExprOrBuilder()
          {abstract} + getLimitOrBuilder()
          {abstract} + getOperation()
          {abstract} + getOperationCount()
          {abstract} + getOperationList()
          {abstract} + getOperationOrBuilder()
          {abstract} + getOperationOrBuilderList()
          {abstract} + getOrder()
          {abstract} + getOrderCount()
          {abstract} + getOrderList()
          {abstract} + getOrderOrBuilder()
          {abstract} + getOrderOrBuilderList()
          {abstract} + hasCollection()
          {abstract} + hasCriteria()
          {abstract} + hasDataModel()
          {abstract} + hasLimit()
          {abstract} + hasLimitExpr()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum ViewAlgorithm {
        MERGE
        MERGE_VALUE
        TEMPTABLE
        TEMPTABLE_VALUE
        UNDEFINED
        UNDEFINED_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum ViewCheckOption {
        CASCADED
        CASCADED_VALUE
        LOCAL
        LOCAL_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum ViewSqlSecurity {
        DEFINER
        DEFINER_VALUE
        INVOKER
        INVOKER_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Cursor_Close_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Cursor_Close_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Cursor_Fetch_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Cursor_Fetch_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Cursor_Open_OneOfMessage_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Cursor_Open_OneOfMessage_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Cursor_Open_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Cursor_Open_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxCursor()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Close {
          {static} + CURSOR_ID_FIELD_NUMBER : int
          {static} + PARSER : Parser<Close>
          {static} - DEFAULT_INSTANCE : Close
          - bitField0_ : int
          - cursorId_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getCursorId()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasCursorId()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Close()
          - Close()
          - Close()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Close.Builder {
          - bitField0_ : int
          - cursorId_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCursorId()
          + clearField()
          + clearOneof()
          + clone()
          + getCursorId()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + hasCursorId()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCursorId()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCursor.CloseOrBuilder {
          {abstract} + getCursorId()
          {abstract} + hasCursorId()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Fetch {
          {static} + CURSOR_ID_FIELD_NUMBER : int
          {static} + FETCH_ROWS_FIELD_NUMBER : int
          {static} + PARSER : Parser<Fetch>
          {static} - DEFAULT_INSTANCE : Fetch
          - bitField0_ : int
          - cursorId_ : int
          - fetchRows_ : long
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getCursorId()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getFetchRows()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasCursorId()
          + hasFetchRows()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Fetch()
          - Fetch()
          - Fetch()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Fetch.Builder {
          - bitField0_ : int
          - cursorId_ : int
          - fetchRows_ : long
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCursorId()
          + clearFetchRows()
          + clearField()
          + clearOneof()
          + clone()
          + getCursorId()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getFetchRows()
          + hasCursorId()
          + hasFetchRows()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCursorId()
          + setFetchRows()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCursor.FetchOrBuilder {
          {abstract} + getCursorId()
          {abstract} + getFetchRows()
          {abstract} + hasCursorId()
          {abstract} + hasFetchRows()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Open {
          {static} + CURSOR_ID_FIELD_NUMBER : int
          {static} + FETCH_ROWS_FIELD_NUMBER : int
          {static} + PARSER : Parser<Open>
          {static} + STMT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Open
          - bitField0_ : int
          - cursorId_ : int
          - fetchRows_ : long
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - stmt_ : OneOfMessage
          + equals()
          + getCursorId()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getFetchRows()
          + getParserForType()
          + getSerializedSize()
          + getStmt()
          + getStmtOrBuilder()
          + getUnknownFields()
          + hasCursorId()
          + hasFetchRows()
          + hasStmt()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Open()
          - Open()
          - Open()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Open.Builder {
          - bitField0_ : int
          - cursorId_ : int
          - fetchRows_ : long
          - stmtBuilder_ : SingleFieldBuilderV3<OneOfMessage, Builder, OneOfMessageOrBuilder>
          - stmt_ : OneOfMessage
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCursorId()
          + clearFetchRows()
          + clearField()
          + clearOneof()
          + clearStmt()
          + clone()
          + getCursorId()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getFetchRows()
          + getStmt()
          + getStmtBuilder()
          + getStmtOrBuilder()
          + hasCursorId()
          + hasFetchRows()
          + hasStmt()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeStmt()
          + mergeUnknownFields()
          + setCursorId()
          + setFetchRows()
          + setField()
          + setRepeatedField()
          + setStmt()
          + setStmt()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getStmtFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage {
          {static} + PARSER : Parser<OneOfMessage>
          {static} + PREPARE_EXECUTE_FIELD_NUMBER : int
          {static} + TYPE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : OneOfMessage
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - prepareExecute_ : Execute
          {static} - serialVersionUID : long
          - type_ : int
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getPrepareExecute()
          + getPrepareExecuteOrBuilder()
          + getSerializedSize()
          + getType()
          + getUnknownFields()
          + hasPrepareExecute()
          + hasType()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - OneOfMessage()
          - OneOfMessage()
          - OneOfMessage()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage.Builder {
          - bitField0_ : int
          - prepareExecuteBuilder_ : SingleFieldBuilderV3<Execute, Builder, ExecuteOrBuilder>
          - prepareExecute_ : Execute
          - type_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearPrepareExecute()
          + clearType()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getPrepareExecute()
          + getPrepareExecuteBuilder()
          + getPrepareExecuteOrBuilder()
          + getType()
          + hasPrepareExecute()
          + hasType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergePrepareExecute()
          + mergeUnknownFields()
          + setField()
          + setPrepareExecute()
          + setPrepareExecute()
          + setRepeatedField()
          + setType()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getPrepareExecuteFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        PREPARE_EXECUTE
        PREPARE_EXECUTE_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessageOrBuilder {
          {abstract} + getPrepareExecute()
          {abstract} + getPrepareExecuteOrBuilder()
          {abstract} + getType()
          {abstract} + hasPrepareExecute()
          {abstract} + hasType()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxCursor.OpenOrBuilder {
          {abstract} + getCursorId()
          {abstract} + getFetchRows()
          {abstract} + getStmt()
          {abstract} + getStmtOrBuilder()
          {abstract} + hasCursorId()
          {abstract} + hasFetchRows()
          {abstract} + hasStmt()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Datatypes_Any_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Datatypes_Any_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Datatypes_Array_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Datatypes_Array_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Datatypes_Object_ObjectField_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Datatypes_Object_ObjectField_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Datatypes_Object_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Datatypes_Object_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Datatypes_Scalar_Octets_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Datatypes_Scalar_Octets_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Datatypes_Scalar_String_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Datatypes_Scalar_String_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Datatypes_Scalar_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Datatypes_Scalar_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxDatatypes()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Any {
          {static} + ARRAY_FIELD_NUMBER : int
          {static} + OBJ_FIELD_NUMBER : int
          {static} + PARSER : Parser<Any>
          {static} + SCALAR_FIELD_NUMBER : int
          {static} + TYPE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Any
          - array_ : Array
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - obj_ : Object
          - scalar_ : Scalar
          {static} - serialVersionUID : long
          - type_ : int
          + equals()
          + getArray()
          + getArrayOrBuilder()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getObj()
          + getObjOrBuilder()
          + getParserForType()
          + getScalar()
          + getScalarOrBuilder()
          + getSerializedSize()
          + getType()
          + getUnknownFields()
          + hasArray()
          + hasObj()
          + hasScalar()
          + hasType()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Any()
          - Any()
          - Any()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Any.Builder {
          - arrayBuilder_ : SingleFieldBuilderV3<Array, Builder, ArrayOrBuilder>
          - array_ : Array
          - bitField0_ : int
          - objBuilder_ : SingleFieldBuilderV3<Object, Builder, ObjectOrBuilder>
          - obj_ : Object
          - scalarBuilder_ : SingleFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - scalar_ : Scalar
          - type_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearArray()
          + clearField()
          + clearObj()
          + clearOneof()
          + clearScalar()
          + clearType()
          + clone()
          + getArray()
          + getArrayBuilder()
          + getArrayOrBuilder()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getObj()
          + getObjBuilder()
          + getObjOrBuilder()
          + getScalar()
          + getScalarBuilder()
          + getScalarOrBuilder()
          + getType()
          + hasArray()
          + hasObj()
          + hasScalar()
          + hasType()
          + isInitialized()
          + mergeArray()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeObj()
          + mergeScalar()
          + mergeUnknownFields()
          + setArray()
          + setArray()
          + setField()
          + setObj()
          + setObj()
          + setRepeatedField()
          + setScalar()
          + setScalar()
          + setType()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getArrayFieldBuilder()
          - getObjFieldBuilder()
          - getScalarFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        ARRAY
        ARRAY_VALUE
        OBJECT
        OBJECT_VALUE
        SCALAR
        SCALAR_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxDatatypes.AnyOrBuilder {
          {abstract} + getArray()
          {abstract} + getArrayOrBuilder()
          {abstract} + getObj()
          {abstract} + getObjOrBuilder()
          {abstract} + getScalar()
          {abstract} + getScalarOrBuilder()
          {abstract} + getType()
          {abstract} + hasArray()
          {abstract} + hasObj()
          {abstract} + hasScalar()
          {abstract} + hasType()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Array {
          {static} + PARSER : Parser<Array>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Array
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - value_ : List<Any>
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + getValueCount()
          + getValueList()
          + getValueOrBuilder()
          + getValueOrBuilderList()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Array()
          - Array()
          - Array()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Array.Builder {
          - bitField0_ : int
          - valueBuilder_ : RepeatedFieldBuilderV3<Any, Builder, AnyOrBuilder>
          - value_ : List<Any>
          + addAllValue()
          + addRepeatedField()
          + addValue()
          + addValue()
          + addValue()
          + addValue()
          + addValueBuilder()
          + addValueBuilder()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getValue()
          + getValueBuilder()
          + getValueBuilderList()
          + getValueCount()
          + getValueList()
          + getValueOrBuilder()
          + getValueOrBuilderList()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeValue()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureValueIsMutable()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxDatatypes.ArrayOrBuilder {
          {abstract} + getValue()
          {abstract} + getValueCount()
          {abstract} + getValueList()
          {abstract} + getValueOrBuilder()
          {abstract} + getValueOrBuilderList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Object {
          {static} + FLD_FIELD_NUMBER : int
          {static} + PARSER : Parser<Object>
          {static} - DEFAULT_INSTANCE : Object
          - fld_ : List<ObjectField>
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getFld()
          + getFldCount()
          + getFldList()
          + getFldOrBuilder()
          + getFldOrBuilderList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Object()
          - Object()
          - Object()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.Builder {
          - bitField0_ : int
          - fldBuilder_ : RepeatedFieldBuilderV3<ObjectField, Builder, ObjectFieldOrBuilder>
          - fld_ : List<ObjectField>
          + addAllFld()
          + addFld()
          + addFld()
          + addFld()
          + addFld()
          + addFldBuilder()
          + addFldBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearFld()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getFld()
          + getFldBuilder()
          + getFldBuilderList()
          + getFldCount()
          + getFldList()
          + getFldOrBuilder()
          + getFldOrBuilderList()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeFld()
          + setField()
          + setFld()
          + setFld()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureFldIsMutable()
          - getFldFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectField {
          {static} + KEY_FIELD_NUMBER : int
          {static} + PARSER : Parser<ObjectField>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : ObjectField
          - bitField0_ : int
          - key_ : Object
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - value_ : Any
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getKey()
          + getKeyBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + getValueOrBuilder()
          + hasKey()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ObjectField()
          - ObjectField()
          - ObjectField()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectField.Builder {
          - bitField0_ : int
          - key_ : Object
          - valueBuilder_ : SingleFieldBuilderV3<Any, Builder, AnyOrBuilder>
          - value_ : Any
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearKey()
          + clearOneof()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getKey()
          + getKeyBytes()
          + getValue()
          + getValueBuilder()
          + getValueOrBuilder()
          + hasKey()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + mergeValue()
          + setField()
          + setKey()
          + setKeyBytes()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectFieldOrBuilder {
          {abstract} + getKey()
          {abstract} + getKeyBytes()
          {abstract} + getValue()
          {abstract} + getValueOrBuilder()
          {abstract} + hasKey()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxDatatypes.ObjectOrBuilder {
          {abstract} + getFld()
          {abstract} + getFldCount()
          {abstract} + getFldList()
          {abstract} + getFldOrBuilder()
          {abstract} + getFldOrBuilderList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar {
          {static} + PARSER : Parser<Scalar>
          {static} + TYPE_FIELD_NUMBER : int
          {static} + V_BOOL_FIELD_NUMBER : int
          {static} + V_DOUBLE_FIELD_NUMBER : int
          {static} + V_FLOAT_FIELD_NUMBER : int
          {static} + V_OCTETS_FIELD_NUMBER : int
          {static} + V_SIGNED_INT_FIELD_NUMBER : int
          {static} + V_STRING_FIELD_NUMBER : int
          {static} + V_UNSIGNED_INT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Scalar
          - bitField0_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - type_ : int
          - vBool_ : boolean
          - vDouble_ : double
          - vFloat_ : float
          - vOctets_ : Octets
          - vSignedInt_ : long
          - vString_ : String
          - vUnsignedInt_ : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getType()
          + getUnknownFields()
          + getVBool()
          + getVDouble()
          + getVFloat()
          + getVOctets()
          + getVOctetsOrBuilder()
          + getVSignedInt()
          + getVString()
          + getVStringOrBuilder()
          + getVUnsignedInt()
          + hasType()
          + hasVBool()
          + hasVDouble()
          + hasVFloat()
          + hasVOctets()
          + hasVSignedInt()
          + hasVString()
          + hasVUnsignedInt()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Scalar()
          - Scalar()
          - Scalar()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Builder {
          - bitField0_ : int
          - type_ : int
          - vBool_ : boolean
          - vDouble_ : double
          - vFloat_ : float
          - vOctetsBuilder_ : SingleFieldBuilderV3<Octets, Builder, OctetsOrBuilder>
          - vOctets_ : Octets
          - vSignedInt_ : long
          - vStringBuilder_ : SingleFieldBuilderV3<String, Builder, StringOrBuilder>
          - vString_ : String
          - vUnsignedInt_ : long
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearType()
          + clearVBool()
          + clearVDouble()
          + clearVFloat()
          + clearVOctets()
          + clearVSignedInt()
          + clearVString()
          + clearVUnsignedInt()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getType()
          + getVBool()
          + getVDouble()
          + getVFloat()
          + getVOctets()
          + getVOctetsBuilder()
          + getVOctetsOrBuilder()
          + getVSignedInt()
          + getVString()
          + getVStringBuilder()
          + getVStringOrBuilder()
          + getVUnsignedInt()
          + hasType()
          + hasVBool()
          + hasVDouble()
          + hasVFloat()
          + hasVOctets()
          + hasVSignedInt()
          + hasVString()
          + hasVUnsignedInt()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + mergeVOctets()
          + mergeVString()
          + setField()
          + setRepeatedField()
          + setType()
          + setUnknownFields()
          + setVBool()
          + setVDouble()
          + setVFloat()
          + setVOctets()
          + setVOctets()
          + setVSignedInt()
          + setVString()
          + setVString()
          + setVUnsignedInt()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getVOctetsFieldBuilder()
          - getVStringFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Octets {
          {static} + CONTENT_TYPE_FIELD_NUMBER : int
          {static} + PARSER : Parser<Octets>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Octets
          - bitField0_ : int
          - contentType_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - value_ : ByteString
          + equals()
          + getContentType()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + hasContentType()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Octets()
          - Octets()
          - Octets()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Octets.Builder {
          - bitField0_ : int
          - contentType_ : int
          - value_ : ByteString
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearContentType()
          + clearField()
          + clearOneof()
          + clearValue()
          + clone()
          + getContentType()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getValue()
          + hasContentType()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setContentType()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.OctetsOrBuilder {
          {abstract} + getContentType()
          {abstract} + getValue()
          {abstract} + hasContentType()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String {
          {static} + COLLATION_FIELD_NUMBER : int
          {static} + PARSER : Parser<String>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : String
          - bitField0_ : int
          - collation_ : long
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - value_ : ByteString
          + equals()
          + getCollation()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + hasCollation()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - String()
          - String()
          - String()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String.Builder {
          - bitField0_ : int
          - collation_ : long
          - value_ : ByteString
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCollation()
          + clearField()
          + clearOneof()
          + clearValue()
          + clone()
          + getCollation()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getValue()
          + hasCollation()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCollation()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.StringOrBuilder {
          {abstract} + getCollation()
          {abstract} + getValue()
          {abstract} + hasCollation()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        V_BOOL
        V_BOOL_VALUE
        V_DOUBLE
        V_DOUBLE_VALUE
        V_FLOAT
        V_FLOAT_VALUE
        V_NULL
        V_NULL_VALUE
        V_OCTETS
        V_OCTETS_VALUE
        V_SINT
        V_SINT_VALUE
        V_STRING
        V_STRING_VALUE
        V_UINT
        V_UINT_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxDatatypes.ScalarOrBuilder {
          {abstract} + getType()
          {abstract} + getVBool()
          {abstract} + getVDouble()
          {abstract} + getVFloat()
          {abstract} + getVOctets()
          {abstract} + getVOctetsOrBuilder()
          {abstract} + getVSignedInt()
          {abstract} + getVString()
          {abstract} + getVStringOrBuilder()
          {abstract} + getVUnsignedInt()
          {abstract} + hasType()
          {abstract} + hasVBool()
          {abstract} + hasVDouble()
          {abstract} + hasVFloat()
          {abstract} + hasVOctets()
          {abstract} + hasVSignedInt()
          {abstract} + hasVString()
          {abstract} + hasVUnsignedInt()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpect {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Expect_Close_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expect_Close_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expect_Open_Condition_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expect_Open_Condition_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expect_Open_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expect_Open_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxExpect()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpect.Close {
          {static} + PARSER : Parser<Close>
          {static} - DEFAULT_INSTANCE : Close
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Close()
          - Close()
          - Close()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpect.Close.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpect.CloseOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpect.Open {
          {static} + COND_FIELD_NUMBER : int
          {static} + OP_FIELD_NUMBER : int
          {static} + PARSER : Parser<Open>
          {static} - DEFAULT_INSTANCE : Open
          - bitField0_ : int
          - cond_ : List<Condition>
          - memoizedIsInitialized : byte
          - op_ : int
          {static} - serialVersionUID : long
          + equals()
          + getCond()
          + getCondCount()
          + getCondList()
          + getCondOrBuilder()
          + getCondOrBuilderList()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getOp()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasOp()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Open()
          - Open()
          - Open()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpect.Open.Builder {
          - bitField0_ : int
          - condBuilder_ : RepeatedFieldBuilderV3<Condition, Builder, ConditionOrBuilder>
          - cond_ : List<Condition>
          - op_ : int
          + addAllCond()
          + addCond()
          + addCond()
          + addCond()
          + addCond()
          + addCondBuilder()
          + addCondBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCond()
          + clearField()
          + clearOneof()
          + clearOp()
          + clone()
          + getCond()
          + getCondBuilder()
          + getCondBuilderList()
          + getCondCount()
          + getCondList()
          + getCondOrBuilder()
          + getCondOrBuilderList()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getOp()
          + hasOp()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeCond()
          + setCond()
          + setCond()
          + setField()
          + setOp()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureCondIsMutable()
          - getCondFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition {
          {static} + CONDITION_KEY_FIELD_NUMBER : int
          {static} + CONDITION_VALUE_FIELD_NUMBER : int
          {static} + OP_FIELD_NUMBER : int
          {static} + PARSER : Parser<Condition>
          {static} - DEFAULT_INSTANCE : Condition
          - bitField0_ : int
          - conditionKey_ : int
          - conditionValue_ : ByteString
          - memoizedIsInitialized : byte
          - op_ : int
          {static} - serialVersionUID : long
          + equals()
          + getConditionKey()
          + getConditionValue()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getOp()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasConditionKey()
          + hasConditionValue()
          + hasOp()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Condition()
          - Condition()
          - Condition()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition.Builder {
          - bitField0_ : int
          - conditionKey_ : int
          - conditionValue_ : ByteString
          - op_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearConditionKey()
          + clearConditionValue()
          + clearField()
          + clearOneof()
          + clearOp()
          + clone()
          + getConditionKey()
          + getConditionValue()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getOp()
          + hasConditionKey()
          + hasConditionValue()
          + hasOp()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setConditionKey()
          + setConditionValue()
          + setField()
          + setOp()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum ConditionOperation {
        EXPECT_OP_SET
        EXPECT_OP_SET_VALUE
        EXPECT_OP_UNSET
        EXPECT_OP_UNSET_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Key {
        EXPECT_DOCID_GENERATED
        EXPECT_DOCID_GENERATED_VALUE
        EXPECT_FIELD_EXIST
        EXPECT_FIELD_EXIST_VALUE
        EXPECT_NO_ERROR
        EXPECT_NO_ERROR_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpect.Open.ConditionOrBuilder {
          {abstract} + getConditionKey()
          {abstract} + getConditionValue()
          {abstract} + getOp()
          {abstract} + hasConditionKey()
          {abstract} + hasConditionValue()
          {abstract} + hasOp()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum CtxOperation {
        EXPECT_CTX_COPY_PREV
        EXPECT_CTX_COPY_PREV_VALUE
        EXPECT_CTX_EMPTY
        EXPECT_CTX_EMPTY_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpect.OpenOrBuilder {
          {abstract} + getCond()
          {abstract} + getCondCount()
          {abstract} + getCondList()
          {abstract} + getCondOrBuilder()
          {abstract} + getCondOrBuilderList()
          {abstract} + getOp()
          {abstract} + hasOp()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Expr_Array_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_Array_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_ColumnIdentifier_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_ColumnIdentifier_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_DocumentPathItem_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_DocumentPathItem_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_Expr_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_Expr_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_FunctionCall_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_FunctionCall_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_Identifier_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_Identifier_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_Object_ObjectField_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_Object_ObjectField_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_Object_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_Object_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Expr_Operator_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Expr_Operator_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxExpr()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Array {
          {static} + PARSER : Parser<Array>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Array
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - value_ : List<Expr>
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + getValueCount()
          + getValueList()
          + getValueOrBuilder()
          + getValueOrBuilderList()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Array()
          - Array()
          - Array()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Array.Builder {
          - bitField0_ : int
          - valueBuilder_ : RepeatedFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - value_ : List<Expr>
          + addAllValue()
          + addRepeatedField()
          + addValue()
          + addValue()
          + addValue()
          + addValue()
          + addValueBuilder()
          + addValueBuilder()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getValue()
          + getValueBuilder()
          + getValueBuilderList()
          + getValueCount()
          + getValueList()
          + getValueOrBuilder()
          + getValueOrBuilderList()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeValue()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureValueIsMutable()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.ArrayOrBuilder {
          {abstract} + getValue()
          {abstract} + getValueCount()
          {abstract} + getValueList()
          {abstract} + getValueOrBuilder()
          {abstract} + getValueOrBuilderList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifier {
          {static} + DOCUMENT_PATH_FIELD_NUMBER : int
          {static} + NAME_FIELD_NUMBER : int
          {static} + PARSER : Parser<ColumnIdentifier>
          {static} + SCHEMA_NAME_FIELD_NUMBER : int
          {static} + TABLE_NAME_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : ColumnIdentifier
          - bitField0_ : int
          - documentPath_ : List<DocumentPathItem>
          - memoizedIsInitialized : byte
          - name_ : Object
          - schemaName_ : Object
          {static} - serialVersionUID : long
          - tableName_ : Object
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDocumentPath()
          + getDocumentPathCount()
          + getDocumentPathList()
          + getDocumentPathOrBuilder()
          + getDocumentPathOrBuilderList()
          + getName()
          + getNameBytes()
          + getParserForType()
          + getSchemaName()
          + getSchemaNameBytes()
          + getSerializedSize()
          + getTableName()
          + getTableNameBytes()
          + getUnknownFields()
          + hasName()
          + hasSchemaName()
          + hasTableName()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ColumnIdentifier()
          - ColumnIdentifier()
          - ColumnIdentifier()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifier.Builder {
          - bitField0_ : int
          - documentPathBuilder_ : RepeatedFieldBuilderV3<DocumentPathItem, Builder, DocumentPathItemOrBuilder>
          - documentPath_ : List<DocumentPathItem>
          - name_ : Object
          - schemaName_ : Object
          - tableName_ : Object
          + addAllDocumentPath()
          + addDocumentPath()
          + addDocumentPath()
          + addDocumentPath()
          + addDocumentPath()
          + addDocumentPathBuilder()
          + addDocumentPathBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearDocumentPath()
          + clearField()
          + clearName()
          + clearOneof()
          + clearSchemaName()
          + clearTableName()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getDocumentPath()
          + getDocumentPathBuilder()
          + getDocumentPathBuilderList()
          + getDocumentPathCount()
          + getDocumentPathList()
          + getDocumentPathOrBuilder()
          + getDocumentPathOrBuilderList()
          + getName()
          + getNameBytes()
          + getSchemaName()
          + getSchemaNameBytes()
          + getTableName()
          + getTableNameBytes()
          + hasName()
          + hasSchemaName()
          + hasTableName()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeDocumentPath()
          + setDocumentPath()
          + setDocumentPath()
          + setField()
          + setName()
          + setNameBytes()
          + setRepeatedField()
          + setSchemaName()
          + setSchemaNameBytes()
          + setTableName()
          + setTableNameBytes()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureDocumentPathIsMutable()
          - getDocumentPathFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifierOrBuilder {
          {abstract} + getDocumentPath()
          {abstract} + getDocumentPathCount()
          {abstract} + getDocumentPathList()
          {abstract} + getDocumentPathOrBuilder()
          {abstract} + getDocumentPathOrBuilderList()
          {abstract} + getName()
          {abstract} + getNameBytes()
          {abstract} + getSchemaName()
          {abstract} + getSchemaNameBytes()
          {abstract} + getTableName()
          {abstract} + getTableNameBytes()
          {abstract} + hasName()
          {abstract} + hasSchemaName()
          {abstract} + hasTableName()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem {
          {static} + INDEX_FIELD_NUMBER : int
          {static} + PARSER : Parser<DocumentPathItem>
          {static} + TYPE_FIELD_NUMBER : int
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : DocumentPathItem
          - bitField0_ : int
          - index_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - type_ : int
          - value_ : Object
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getIndex()
          + getParserForType()
          + getSerializedSize()
          + getType()
          + getUnknownFields()
          + getValue()
          + getValueBytes()
          + hasIndex()
          + hasType()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - DocumentPathItem()
          - DocumentPathItem()
          - DocumentPathItem()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem.Builder {
          - bitField0_ : int
          - index_ : int
          - type_ : int
          - value_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearIndex()
          + clearOneof()
          + clearType()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getIndex()
          + getType()
          + getValue()
          + getValueBytes()
          + hasIndex()
          + hasType()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setIndex()
          + setRepeatedField()
          + setType()
          + setUnknownFields()
          + setValue()
          + setValueBytes()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        ARRAY_INDEX
        ARRAY_INDEX_ASTERISK
        ARRAY_INDEX_ASTERISK_VALUE
        ARRAY_INDEX_VALUE
        DOUBLE_ASTERISK
        DOUBLE_ASTERISK_VALUE
        MEMBER
        MEMBER_ASTERISK
        MEMBER_ASTERISK_VALUE
        MEMBER_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItemOrBuilder {
          {abstract} + getIndex()
          {abstract} + getType()
          {abstract} + getValue()
          {abstract} + getValueBytes()
          {abstract} + hasIndex()
          {abstract} + hasType()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Expr {
          {static} + ARRAY_FIELD_NUMBER : int
          {static} + FUNCTION_CALL_FIELD_NUMBER : int
          {static} + IDENTIFIER_FIELD_NUMBER : int
          {static} + LITERAL_FIELD_NUMBER : int
          {static} + OBJECT_FIELD_NUMBER : int
          {static} + OPERATOR_FIELD_NUMBER : int
          {static} + PARSER : Parser<Expr>
          {static} + POSITION_FIELD_NUMBER : int
          {static} + TYPE_FIELD_NUMBER : int
          {static} + VARIABLE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Expr
          - array_ : Array
          - bitField0_ : int
          - functionCall_ : FunctionCall
          - identifier_ : ColumnIdentifier
          - literal_ : Scalar
          - memoizedIsInitialized : byte
          - object_ : Object
          - operator_ : Operator
          - position_ : int
          {static} - serialVersionUID : long
          - type_ : int
          - variable_ : Object
          + equals()
          + getArray()
          + getArrayOrBuilder()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getFunctionCall()
          + getFunctionCallOrBuilder()
          + getIdentifier()
          + getIdentifierOrBuilder()
          + getLiteral()
          + getLiteralOrBuilder()
          + getObject()
          + getObjectOrBuilder()
          + getOperator()
          + getOperatorOrBuilder()
          + getParserForType()
          + getPosition()
          + getSerializedSize()
          + getType()
          + getUnknownFields()
          + getVariable()
          + getVariableBytes()
          + hasArray()
          + hasFunctionCall()
          + hasIdentifier()
          + hasLiteral()
          + hasObject()
          + hasOperator()
          + hasPosition()
          + hasType()
          + hasVariable()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Expr()
          - Expr()
          - Expr()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Expr.Builder {
          - arrayBuilder_ : SingleFieldBuilderV3<Array, Builder, ArrayOrBuilder>
          - array_ : Array
          - bitField0_ : int
          - functionCallBuilder_ : SingleFieldBuilderV3<FunctionCall, Builder, FunctionCallOrBuilder>
          - functionCall_ : FunctionCall
          - identifierBuilder_ : SingleFieldBuilderV3<ColumnIdentifier, Builder, ColumnIdentifierOrBuilder>
          - identifier_ : ColumnIdentifier
          - literalBuilder_ : SingleFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - literal_ : Scalar
          - objectBuilder_ : SingleFieldBuilderV3<Object, Builder, ObjectOrBuilder>
          - object_ : Object
          - operatorBuilder_ : SingleFieldBuilderV3<Operator, Builder, OperatorOrBuilder>
          - operator_ : Operator
          - position_ : int
          - type_ : int
          - variable_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearArray()
          + clearField()
          + clearFunctionCall()
          + clearIdentifier()
          + clearLiteral()
          + clearObject()
          + clearOneof()
          + clearOperator()
          + clearPosition()
          + clearType()
          + clearVariable()
          + clone()
          + getArray()
          + getArrayBuilder()
          + getArrayOrBuilder()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getFunctionCall()
          + getFunctionCallBuilder()
          + getFunctionCallOrBuilder()
          + getIdentifier()
          + getIdentifierBuilder()
          + getIdentifierOrBuilder()
          + getLiteral()
          + getLiteralBuilder()
          + getLiteralOrBuilder()
          + getObject()
          + getObjectBuilder()
          + getObjectOrBuilder()
          + getOperator()
          + getOperatorBuilder()
          + getOperatorOrBuilder()
          + getPosition()
          + getType()
          + getVariable()
          + getVariableBytes()
          + hasArray()
          + hasFunctionCall()
          + hasIdentifier()
          + hasLiteral()
          + hasObject()
          + hasOperator()
          + hasPosition()
          + hasType()
          + hasVariable()
          + isInitialized()
          + mergeArray()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeFunctionCall()
          + mergeIdentifier()
          + mergeLiteral()
          + mergeObject()
          + mergeOperator()
          + mergeUnknownFields()
          + setArray()
          + setArray()
          + setField()
          + setFunctionCall()
          + setFunctionCall()
          + setIdentifier()
          + setIdentifier()
          + setLiteral()
          + setLiteral()
          + setObject()
          + setObject()
          + setOperator()
          + setOperator()
          + setPosition()
          + setRepeatedField()
          + setType()
          + setUnknownFields()
          + setVariable()
          + setVariableBytes()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getArrayFieldBuilder()
          - getFunctionCallFieldBuilder()
          - getIdentifierFieldBuilder()
          - getLiteralFieldBuilder()
          - getObjectFieldBuilder()
          - getOperatorFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        ARRAY
        ARRAY_VALUE
        FUNC_CALL
        FUNC_CALL_VALUE
        IDENT
        IDENT_VALUE
        LITERAL
        LITERAL_VALUE
        OBJECT
        OBJECT_VALUE
        OPERATOR
        OPERATOR_VALUE
        PLACEHOLDER
        PLACEHOLDER_VALUE
        VARIABLE
        VARIABLE_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.ExprOrBuilder {
          {abstract} + getArray()
          {abstract} + getArrayOrBuilder()
          {abstract} + getFunctionCall()
          {abstract} + getFunctionCallOrBuilder()
          {abstract} + getIdentifier()
          {abstract} + getIdentifierOrBuilder()
          {abstract} + getLiteral()
          {abstract} + getLiteralOrBuilder()
          {abstract} + getObject()
          {abstract} + getObjectOrBuilder()
          {abstract} + getOperator()
          {abstract} + getOperatorOrBuilder()
          {abstract} + getPosition()
          {abstract} + getType()
          {abstract} + getVariable()
          {abstract} + getVariableBytes()
          {abstract} + hasArray()
          {abstract} + hasFunctionCall()
          {abstract} + hasIdentifier()
          {abstract} + hasLiteral()
          {abstract} + hasObject()
          {abstract} + hasOperator()
          {abstract} + hasPosition()
          {abstract} + hasType()
          {abstract} + hasVariable()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCall {
          {static} + NAME_FIELD_NUMBER : int
          {static} + PARAM_FIELD_NUMBER : int
          {static} + PARSER : Parser<FunctionCall>
          {static} - DEFAULT_INSTANCE : FunctionCall
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - name_ : Identifier
          - param_ : List<Expr>
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getName()
          + getNameOrBuilder()
          + getParam()
          + getParamCount()
          + getParamList()
          + getParamOrBuilder()
          + getParamOrBuilderList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasName()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - FunctionCall()
          - FunctionCall()
          - FunctionCall()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCall.Builder {
          - bitField0_ : int
          - nameBuilder_ : SingleFieldBuilderV3<Identifier, Builder, IdentifierOrBuilder>
          - name_ : Identifier
          - paramBuilder_ : RepeatedFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - param_ : List<Expr>
          + addAllParam()
          + addParam()
          + addParam()
          + addParam()
          + addParam()
          + addParamBuilder()
          + addParamBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearName()
          + clearOneof()
          + clearParam()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getName()
          + getNameBuilder()
          + getNameOrBuilder()
          + getParam()
          + getParamBuilder()
          + getParamBuilderList()
          + getParamCount()
          + getParamList()
          + getParamOrBuilder()
          + getParamOrBuilderList()
          + hasName()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeName()
          + mergeUnknownFields()
          + removeParam()
          + setField()
          + setName()
          + setName()
          + setParam()
          + setParam()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureParamIsMutable()
          - getNameFieldBuilder()
          - getParamFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCallOrBuilder {
          {abstract} + getName()
          {abstract} + getNameOrBuilder()
          {abstract} + getParam()
          {abstract} + getParamCount()
          {abstract} + getParamList()
          {abstract} + getParamOrBuilder()
          {abstract} + getParamOrBuilderList()
          {abstract} + hasName()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Identifier {
          {static} + NAME_FIELD_NUMBER : int
          {static} + PARSER : Parser<Identifier>
          {static} + SCHEMA_NAME_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Identifier
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - name_ : Object
          - schemaName_ : Object
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getName()
          + getNameBytes()
          + getParserForType()
          + getSchemaName()
          + getSchemaNameBytes()
          + getSerializedSize()
          + getUnknownFields()
          + hasName()
          + hasSchemaName()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Identifier()
          - Identifier()
          - Identifier()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Identifier.Builder {
          - bitField0_ : int
          - name_ : Object
          - schemaName_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearName()
          + clearOneof()
          + clearSchemaName()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getName()
          + getNameBytes()
          + getSchemaName()
          + getSchemaNameBytes()
          + hasName()
          + hasSchemaName()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setName()
          + setNameBytes()
          + setRepeatedField()
          + setSchemaName()
          + setSchemaNameBytes()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.IdentifierOrBuilder {
          {abstract} + getName()
          {abstract} + getNameBytes()
          {abstract} + getSchemaName()
          {abstract} + getSchemaNameBytes()
          {abstract} + hasName()
          {abstract} + hasSchemaName()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Object {
          {static} + FLD_FIELD_NUMBER : int
          {static} + PARSER : Parser<Object>
          {static} - DEFAULT_INSTANCE : Object
          - fld_ : List<ObjectField>
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getFld()
          + getFldCount()
          + getFldList()
          + getFldOrBuilder()
          + getFldOrBuilderList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Object()
          - Object()
          - Object()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Object.Builder {
          - bitField0_ : int
          - fldBuilder_ : RepeatedFieldBuilderV3<ObjectField, Builder, ObjectFieldOrBuilder>
          - fld_ : List<ObjectField>
          + addAllFld()
          + addFld()
          + addFld()
          + addFld()
          + addFld()
          + addFldBuilder()
          + addFldBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearFld()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getFld()
          + getFldBuilder()
          + getFldBuilderList()
          + getFldCount()
          + getFldList()
          + getFldOrBuilder()
          + getFldOrBuilderList()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeFld()
          + setField()
          + setFld()
          + setFld()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureFldIsMutable()
          - getFldFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectField {
          {static} + KEY_FIELD_NUMBER : int
          {static} + PARSER : Parser<ObjectField>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : ObjectField
          - bitField0_ : int
          - key_ : Object
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - value_ : Expr
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getKey()
          + getKeyBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + getValueOrBuilder()
          + hasKey()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ObjectField()
          - ObjectField()
          - ObjectField()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectField.Builder {
          - bitField0_ : int
          - key_ : Object
          - valueBuilder_ : SingleFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - value_ : Expr
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearKey()
          + clearOneof()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getKey()
          + getKeyBytes()
          + getValue()
          + getValueBuilder()
          + getValueOrBuilder()
          + hasKey()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + mergeValue()
          + setField()
          + setKey()
          + setKeyBytes()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectFieldOrBuilder {
          {abstract} + getKey()
          {abstract} + getKeyBytes()
          {abstract} + getValue()
          {abstract} + getValueOrBuilder()
          {abstract} + hasKey()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.ObjectOrBuilder {
          {abstract} + getFld()
          {abstract} + getFldCount()
          {abstract} + getFldList()
          {abstract} + getFldOrBuilder()
          {abstract} + getFldOrBuilderList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Operator {
          {static} + NAME_FIELD_NUMBER : int
          {static} + PARAM_FIELD_NUMBER : int
          {static} + PARSER : Parser<Operator>
          {static} - DEFAULT_INSTANCE : Operator
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - name_ : Object
          - param_ : List<Expr>
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getName()
          + getNameBytes()
          + getParam()
          + getParamCount()
          + getParamList()
          + getParamOrBuilder()
          + getParamOrBuilderList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasName()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Operator()
          - Operator()
          - Operator()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxExpr.Operator.Builder {
          - bitField0_ : int
          - name_ : Object
          - paramBuilder_ : RepeatedFieldBuilderV3<Expr, Builder, ExprOrBuilder>
          - param_ : List<Expr>
          + addAllParam()
          + addParam()
          + addParam()
          + addParam()
          + addParam()
          + addParamBuilder()
          + addParamBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearName()
          + clearOneof()
          + clearParam()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getName()
          + getNameBytes()
          + getParam()
          + getParamBuilder()
          + getParamBuilderList()
          + getParamCount()
          + getParamList()
          + getParamOrBuilder()
          + getParamOrBuilderList()
          + hasName()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeParam()
          + setField()
          + setName()
          + setNameBytes()
          + setParam()
          + setParam()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureParamIsMutable()
          - getParamFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxExpr.OperatorOrBuilder {
          {abstract} + getName()
          {abstract} + getNameBytes()
          {abstract} + getParam()
          {abstract} + getParamCount()
          {abstract} + getParamList()
          {abstract} + getParamOrBuilder()
          {abstract} + getParamOrBuilderList()
          {abstract} + hasName()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Notice_Frame_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Notice_Frame_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Notice_GroupReplicationStateChanged_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Notice_GroupReplicationStateChanged_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Notice_ServerHello_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Notice_ServerHello_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Notice_SessionStateChanged_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Notice_SessionStateChanged_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Notice_SessionVariableChanged_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Notice_SessionVariableChanged_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Notice_Warning_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Notice_Warning_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxNotice()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.Frame {
          {static} + PARSER : Parser<Frame>
          {static} + PAYLOAD_FIELD_NUMBER : int
          {static} + SCOPE_FIELD_NUMBER : int
          {static} + TYPE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Frame
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - payload_ : ByteString
          - scope_ : int
          {static} - serialVersionUID : long
          - type_ : int
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getPayload()
          + getScope()
          + getSerializedSize()
          + getType()
          + getUnknownFields()
          + hasPayload()
          + hasScope()
          + hasType()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Frame()
          - Frame()
          - Frame()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.Frame.Builder {
          - bitField0_ : int
          - payload_ : ByteString
          - scope_ : int
          - type_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearPayload()
          + clearScope()
          + clearType()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getPayload()
          + getScope()
          + getType()
          + hasPayload()
          + hasScope()
          + hasType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setPayload()
          + setRepeatedField()
          + setScope()
          + setType()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Scope {
        GLOBAL
        GLOBAL_VALUE
        LOCAL
        LOCAL_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        GROUP_REPLICATION_STATE_CHANGED
        GROUP_REPLICATION_STATE_CHANGED_VALUE
        SERVER_HELLO
        SERVER_HELLO_VALUE
        SESSION_STATE_CHANGED
        SESSION_STATE_CHANGED_VALUE
        SESSION_VARIABLE_CHANGED
        SESSION_VARIABLE_CHANGED_VALUE
        WARNING
        WARNING_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxNotice.FrameOrBuilder {
          {abstract} + getPayload()
          {abstract} + getScope()
          {abstract} + getType()
          {abstract} + hasPayload()
          {abstract} + hasScope()
          {abstract} + hasType()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged {
          {static} + PARSER : Parser<GroupReplicationStateChanged>
          {static} + TYPE_FIELD_NUMBER : int
          {static} + VIEW_ID_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : GroupReplicationStateChanged
          - bitField0_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - type_ : int
          - viewId_ : Object
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getType()
          + getUnknownFields()
          + getViewId()
          + getViewIdBytes()
          + hasType()
          + hasViewId()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - GroupReplicationStateChanged()
          - GroupReplicationStateChanged()
          - GroupReplicationStateChanged()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged.Builder {
          - bitField0_ : int
          - type_ : int
          - viewId_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearType()
          + clearViewId()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getType()
          + getViewId()
          + getViewIdBytes()
          + hasType()
          + hasViewId()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setType()
          + setUnknownFields()
          + setViewId()
          + setViewIdBytes()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        MEMBERSHIP_QUORUM_LOSS
        MEMBERSHIP_QUORUM_LOSS_VALUE
        MEMBERSHIP_VIEW_CHANGE
        MEMBERSHIP_VIEW_CHANGE_VALUE
        MEMBER_ROLE_CHANGE
        MEMBER_ROLE_CHANGE_VALUE
        MEMBER_STATE_CHANGE
        MEMBER_STATE_CHANGE_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChangedOrBuilder {
          {abstract} + getType()
          {abstract} + getViewId()
          {abstract} + getViewIdBytes()
          {abstract} + hasType()
          {abstract} + hasViewId()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.ServerHello {
          {static} + PARSER : Parser<ServerHello>
          {static} - DEFAULT_INSTANCE : ServerHello
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ServerHello()
          - ServerHello()
          - ServerHello()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.ServerHello.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxNotice.ServerHelloOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged {
          {static} + PARAM_FIELD_NUMBER : int
          {static} + PARSER : Parser<SessionStateChanged>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : SessionStateChanged
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - param_ : int
          {static} - serialVersionUID : long
          - value_ : List<Scalar>
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParam()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + getValueCount()
          + getValueList()
          + getValueOrBuilder()
          + getValueOrBuilderList()
          + hasParam()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - SessionStateChanged()
          - SessionStateChanged()
          - SessionStateChanged()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged.Builder {
          - bitField0_ : int
          - param_ : int
          - valueBuilder_ : RepeatedFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - value_ : List<Scalar>
          + addAllValue()
          + addRepeatedField()
          + addValue()
          + addValue()
          + addValue()
          + addValue()
          + addValueBuilder()
          + addValueBuilder()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearParam()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getParam()
          + getValue()
          + getValueBuilder()
          + getValueBuilderList()
          + getValueCount()
          + getValueList()
          + getValueOrBuilder()
          + getValueOrBuilderList()
          + hasParam()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeValue()
          + setField()
          + setParam()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureValueIsMutable()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Parameter {
        ACCOUNT_EXPIRED
        ACCOUNT_EXPIRED_VALUE
        CLIENT_ID_ASSIGNED
        CLIENT_ID_ASSIGNED_VALUE
        CURRENT_SCHEMA
        CURRENT_SCHEMA_VALUE
        GENERATED_DOCUMENT_IDS
        GENERATED_DOCUMENT_IDS_VALUE
        GENERATED_INSERT_ID
        GENERATED_INSERT_ID_VALUE
        PRODUCED_MESSAGE
        PRODUCED_MESSAGE_VALUE
        ROWS_AFFECTED
        ROWS_AFFECTED_VALUE
        ROWS_FOUND
        ROWS_FOUND_VALUE
        ROWS_MATCHED
        ROWS_MATCHED_VALUE
        TRX_COMMITTED
        TRX_COMMITTED_VALUE
        TRX_ROLLEDBACK
        TRX_ROLLEDBACK_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChangedOrBuilder {
          {abstract} + getParam()
          {abstract} + getValue()
          {abstract} + getValueCount()
          {abstract} + getValueList()
          {abstract} + getValueOrBuilder()
          {abstract} + getValueOrBuilderList()
          {abstract} + hasParam()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChanged {
          {static} + PARAM_FIELD_NUMBER : int
          {static} + PARSER : Parser<SessionVariableChanged>
          {static} + VALUE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : SessionVariableChanged
          - bitField0_ : int
          - memoizedIsInitialized : byte
          - param_ : Object
          {static} - serialVersionUID : long
          - value_ : Scalar
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParam()
          + getParamBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + getValue()
          + getValueOrBuilder()
          + hasParam()
          + hasValue()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - SessionVariableChanged()
          - SessionVariableChanged()
          - SessionVariableChanged()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChanged.Builder {
          - bitField0_ : int
          - param_ : Object
          - valueBuilder_ : SingleFieldBuilderV3<Scalar, Builder, ScalarOrBuilder>
          - value_ : Scalar
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearParam()
          + clearValue()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getParam()
          + getParamBytes()
          + getValue()
          + getValueBuilder()
          + getValueOrBuilder()
          + hasParam()
          + hasValue()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + mergeValue()
          + setField()
          + setParam()
          + setParamBytes()
          + setRepeatedField()
          + setUnknownFields()
          + setValue()
          + setValue()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getValueFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChangedOrBuilder {
          {abstract} + getParam()
          {abstract} + getParamBytes()
          {abstract} + getValue()
          {abstract} + getValueOrBuilder()
          {abstract} + hasParam()
          {abstract} + hasValue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.Warning {
          {static} + CODE_FIELD_NUMBER : int
          {static} + LEVEL_FIELD_NUMBER : int
          {static} + MSG_FIELD_NUMBER : int
          {static} + PARSER : Parser<Warning>
          {static} - DEFAULT_INSTANCE : Warning
          - bitField0_ : int
          - code_ : int
          - level_ : int
          - memoizedIsInitialized : byte
          - msg_ : Object
          {static} - serialVersionUID : long
          + equals()
          + getCode()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getLevel()
          + getMsg()
          + getMsgBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasCode()
          + hasLevel()
          + hasMsg()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Warning()
          - Warning()
          - Warning()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxNotice.Warning.Builder {
          - bitField0_ : int
          - code_ : int
          - level_ : int
          - msg_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCode()
          + clearField()
          + clearLevel()
          + clearMsg()
          + clearOneof()
          + clone()
          + getCode()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getLevel()
          + getMsg()
          + getMsgBytes()
          + hasCode()
          + hasLevel()
          + hasMsg()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCode()
          + setField()
          + setLevel()
          + setMsg()
          + setMsgBytes()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Level {
        ERROR
        ERROR_VALUE
        NOTE
        NOTE_VALUE
        WARNING
        WARNING_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxNotice.WarningOrBuilder {
          {abstract} + getCode()
          {abstract} + getLevel()
          {abstract} + getMsg()
          {abstract} + getMsgBytes()
          {abstract} + hasCode()
          {abstract} + hasLevel()
          {abstract} + hasMsg()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Prepare_Deallocate_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Prepare_Deallocate_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Prepare_Execute_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Prepare_Execute_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Prepare_Prepare_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Prepare_Prepare_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxPrepare()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate {
          {static} + PARSER : Parser<Deallocate>
          {static} + STMT_ID_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Deallocate
          - bitField0_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - stmtId_ : int
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getStmtId()
          + getUnknownFields()
          + hasStmtId()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Deallocate()
          - Deallocate()
          - Deallocate()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate.Builder {
          - bitField0_ : int
          - stmtId_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearStmtId()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getStmtId()
          + hasStmtId()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setStmtId()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxPrepare.DeallocateOrBuilder {
          {abstract} + getStmtId()
          {abstract} + hasStmtId()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Execute {
          {static} + ARGS_FIELD_NUMBER : int
          {static} + COMPACT_METADATA_FIELD_NUMBER : int
          {static} + PARSER : Parser<Execute>
          {static} + STMT_ID_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Execute
          - args_ : List<Any>
          - bitField0_ : int
          - compactMetadata_ : boolean
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - stmtId_ : int
          + equals()
          + getArgs()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCompactMetadata()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getStmtId()
          + getUnknownFields()
          + hasCompactMetadata()
          + hasStmtId()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Execute()
          - Execute()
          - Execute()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Execute.Builder {
          - argsBuilder_ : RepeatedFieldBuilderV3<Any, Builder, AnyOrBuilder>
          - args_ : List<Any>
          - bitField0_ : int
          - compactMetadata_ : boolean
          - stmtId_ : int
          + addAllArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgsBuilder()
          + addArgsBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearArgs()
          + clearCompactMetadata()
          + clearField()
          + clearOneof()
          + clearStmtId()
          + clone()
          + getArgs()
          + getArgsBuilder()
          + getArgsBuilderList()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCompactMetadata()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getStmtId()
          + hasCompactMetadata()
          + hasStmtId()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeArgs()
          + setArgs()
          + setArgs()
          + setCompactMetadata()
          + setField()
          + setRepeatedField()
          + setStmtId()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureArgsIsMutable()
          - getArgsFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxPrepare.ExecuteOrBuilder {
          {abstract} + getArgs()
          {abstract} + getArgsCount()
          {abstract} + getArgsList()
          {abstract} + getArgsOrBuilder()
          {abstract} + getArgsOrBuilderList()
          {abstract} + getCompactMetadata()
          {abstract} + getStmtId()
          {abstract} + hasCompactMetadata()
          {abstract} + hasStmtId()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare {
          {static} + PARSER : Parser<Prepare>
          {static} + STMT_FIELD_NUMBER : int
          {static} + STMT_ID_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : Prepare
          - bitField0_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - stmtId_ : int
          - stmt_ : OneOfMessage
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getStmt()
          + getStmtId()
          + getStmtOrBuilder()
          + getUnknownFields()
          + hasStmt()
          + hasStmtId()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Prepare()
          - Prepare()
          - Prepare()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.Builder {
          - bitField0_ : int
          - stmtBuilder_ : SingleFieldBuilderV3<OneOfMessage, Builder, OneOfMessageOrBuilder>
          - stmtId_ : int
          - stmt_ : OneOfMessage
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clearStmt()
          + clearStmtId()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getStmt()
          + getStmtBuilder()
          + getStmtId()
          + getStmtOrBuilder()
          + hasStmt()
          + hasStmtId()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeStmt()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setStmt()
          + setStmt()
          + setStmtId()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getStmtFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage {
          {static} + DELETE_FIELD_NUMBER : int
          {static} + FIND_FIELD_NUMBER : int
          {static} + INSERT_FIELD_NUMBER : int
          {static} + PARSER : Parser<OneOfMessage>
          {static} + STMT_EXECUTE_FIELD_NUMBER : int
          {static} + TYPE_FIELD_NUMBER : int
          {static} + UPDATE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : OneOfMessage
          - bitField0_ : int
          - delete_ : Delete
          - find_ : Find
          - insert_ : Insert
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          - stmtExecute_ : StmtExecute
          - type_ : int
          - update_ : Update
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          + getDelete()
          + getDeleteOrBuilder()
          {static} + getDescriptor()
          + getFind()
          + getFindOrBuilder()
          + getInsert()
          + getInsertOrBuilder()
          + getParserForType()
          + getSerializedSize()
          + getStmtExecute()
          + getStmtExecuteOrBuilder()
          + getType()
          + getUnknownFields()
          + getUpdate()
          + getUpdateOrBuilder()
          + hasDelete()
          + hasFind()
          + hasInsert()
          + hasStmtExecute()
          + hasType()
          + hasUpdate()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - OneOfMessage()
          - OneOfMessage()
          - OneOfMessage()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage.Builder {
          - bitField0_ : int
          - deleteBuilder_ : SingleFieldBuilderV3<Delete, Builder, DeleteOrBuilder>
          - delete_ : Delete
          - findBuilder_ : SingleFieldBuilderV3<Find, Builder, FindOrBuilder>
          - find_ : Find
          - insertBuilder_ : SingleFieldBuilderV3<Insert, Builder, InsertOrBuilder>
          - insert_ : Insert
          - stmtExecuteBuilder_ : SingleFieldBuilderV3<StmtExecute, Builder, StmtExecuteOrBuilder>
          - stmtExecute_ : StmtExecute
          - type_ : int
          - updateBuilder_ : SingleFieldBuilderV3<Update, Builder, UpdateOrBuilder>
          - update_ : Update
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearDelete()
          + clearField()
          + clearFind()
          + clearInsert()
          + clearOneof()
          + clearStmtExecute()
          + clearType()
          + clearUpdate()
          + clone()
          + getDefaultInstanceForType()
          + getDelete()
          + getDeleteBuilder()
          + getDeleteOrBuilder()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getFind()
          + getFindBuilder()
          + getFindOrBuilder()
          + getInsert()
          + getInsertBuilder()
          + getInsertOrBuilder()
          + getStmtExecute()
          + getStmtExecuteBuilder()
          + getStmtExecuteOrBuilder()
          + getType()
          + getUpdate()
          + getUpdateBuilder()
          + getUpdateOrBuilder()
          + hasDelete()
          + hasFind()
          + hasInsert()
          + hasStmtExecute()
          + hasType()
          + hasUpdate()
          + isInitialized()
          + mergeDelete()
          + mergeFind()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeInsert()
          + mergeStmtExecute()
          + mergeUnknownFields()
          + mergeUpdate()
          + setDelete()
          + setDelete()
          + setField()
          + setFind()
          + setFind()
          + setInsert()
          + setInsert()
          + setRepeatedField()
          + setStmtExecute()
          + setStmtExecute()
          + setType()
          + setUnknownFields()
          + setUpdate()
          + setUpdate()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - getDeleteFieldBuilder()
          - getFindFieldBuilder()
          - getInsertFieldBuilder()
          - getStmtExecuteFieldBuilder()
          - getUpdateFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum Type {
        DELETE
        DELETE_VALUE
        FIND
        FIND_VALUE
        INSERT
        INSERT_VALUE
        STMT
        STMT_VALUE
        UPDATE
        UPDATE_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessageOrBuilder {
          {abstract} + getDelete()
          {abstract} + getDeleteOrBuilder()
          {abstract} + getFind()
          {abstract} + getFindOrBuilder()
          {abstract} + getInsert()
          {abstract} + getInsertOrBuilder()
          {abstract} + getStmtExecute()
          {abstract} + getStmtExecuteOrBuilder()
          {abstract} + getType()
          {abstract} + getUpdate()
          {abstract} + getUpdateOrBuilder()
          {abstract} + hasDelete()
          {abstract} + hasFind()
          {abstract} + hasInsert()
          {abstract} + hasStmtExecute()
          {abstract} + hasType()
          {abstract} + hasUpdate()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxPrepare.PrepareOrBuilder {
          {abstract} + getStmt()
          {abstract} + getStmtId()
          {abstract} + getStmtOrBuilder()
          {abstract} + hasStmt()
          {abstract} + hasStmtId()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Resultset_ColumnMetaData_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Resultset_ColumnMetaData_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Resultset_FetchDoneMoreOutParams_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Resultset_FetchDoneMoreOutParams_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Resultset_FetchDoneMoreResultsets_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Resultset_FetchDoneMoreResultsets_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Resultset_FetchDone_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Resultset_FetchDone_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Resultset_FetchSuspended_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Resultset_FetchSuspended_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Resultset_Row_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Resultset_Row_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxResultset()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData {
          {static} + CATALOG_FIELD_NUMBER : int
          {static} + COLLATION_FIELD_NUMBER : int
          {static} + CONTENT_TYPE_FIELD_NUMBER : int
          {static} + FLAGS_FIELD_NUMBER : int
          {static} + FRACTIONAL_DIGITS_FIELD_NUMBER : int
          {static} + LENGTH_FIELD_NUMBER : int
          {static} + NAME_FIELD_NUMBER : int
          {static} + ORIGINAL_NAME_FIELD_NUMBER : int
          {static} + ORIGINAL_TABLE_FIELD_NUMBER : int
          {static} + PARSER : Parser<ColumnMetaData>
          {static} + SCHEMA_FIELD_NUMBER : int
          {static} + TABLE_FIELD_NUMBER : int
          {static} + TYPE_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : ColumnMetaData
          - bitField0_ : int
          - catalog_ : ByteString
          - collation_ : long
          - contentType_ : int
          - flags_ : int
          - fractionalDigits_ : int
          - length_ : int
          - memoizedIsInitialized : byte
          - name_ : ByteString
          - originalName_ : ByteString
          - originalTable_ : ByteString
          - schema_ : ByteString
          {static} - serialVersionUID : long
          - table_ : ByteString
          - type_ : int
          + equals()
          + getCatalog()
          + getCollation()
          + getContentType()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getFlags()
          + getFractionalDigits()
          + getLength()
          + getName()
          + getOriginalName()
          + getOriginalTable()
          + getParserForType()
          + getSchema()
          + getSerializedSize()
          + getTable()
          + getType()
          + getUnknownFields()
          + hasCatalog()
          + hasCollation()
          + hasContentType()
          + hasFlags()
          + hasFractionalDigits()
          + hasLength()
          + hasName()
          + hasOriginalName()
          + hasOriginalTable()
          + hasSchema()
          + hasTable()
          + hasType()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - ColumnMetaData()
          - ColumnMetaData()
          - ColumnMetaData()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData.Builder {
          - bitField0_ : int
          - catalog_ : ByteString
          - collation_ : long
          - contentType_ : int
          - flags_ : int
          - fractionalDigits_ : int
          - length_ : int
          - name_ : ByteString
          - originalName_ : ByteString
          - originalTable_ : ByteString
          - schema_ : ByteString
          - table_ : ByteString
          - type_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearCatalog()
          + clearCollation()
          + clearContentType()
          + clearField()
          + clearFlags()
          + clearFractionalDigits()
          + clearLength()
          + clearName()
          + clearOneof()
          + clearOriginalName()
          + clearOriginalTable()
          + clearSchema()
          + clearTable()
          + clearType()
          + clone()
          + getCatalog()
          + getCollation()
          + getContentType()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getFlags()
          + getFractionalDigits()
          + getLength()
          + getName()
          + getOriginalName()
          + getOriginalTable()
          + getSchema()
          + getTable()
          + getType()
          + hasCatalog()
          + hasCollation()
          + hasContentType()
          + hasFlags()
          + hasFractionalDigits()
          + hasLength()
          + hasName()
          + hasOriginalName()
          + hasOriginalTable()
          + hasSchema()
          + hasTable()
          + hasType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setCatalog()
          + setCollation()
          + setContentType()
          + setField()
          + setFlags()
          + setFractionalDigits()
          + setLength()
          + setName()
          + setOriginalName()
          + setOriginalTable()
          + setRepeatedField()
          + setSchema()
          + setTable()
          + setType()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum FieldType {
        BIT
        BIT_VALUE
        BYTES
        BYTES_VALUE
        DATETIME
        DATETIME_VALUE
        DECIMAL
        DECIMAL_VALUE
        DOUBLE
        DOUBLE_VALUE
        ENUM
        ENUM_VALUE
        FLOAT
        FLOAT_VALUE
        SET
        SET_VALUE
        SINT
        SINT_VALUE
        TIME
        TIME_VALUE
        UINT
        UINT_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaDataOrBuilder {
          {abstract} + getCatalog()
          {abstract} + getCollation()
          {abstract} + getContentType()
          {abstract} + getFlags()
          {abstract} + getFractionalDigits()
          {abstract} + getLength()
          {abstract} + getName()
          {abstract} + getOriginalName()
          {abstract} + getOriginalTable()
          {abstract} + getSchema()
          {abstract} + getTable()
          {abstract} + getType()
          {abstract} + hasCatalog()
          {abstract} + hasCollation()
          {abstract} + hasContentType()
          {abstract} + hasFlags()
          {abstract} + hasFractionalDigits()
          {abstract} + hasLength()
          {abstract} + hasName()
          {abstract} + hasOriginalName()
          {abstract} + hasOriginalTable()
          {abstract} + hasSchema()
          {abstract} + hasTable()
          {abstract} + hasType()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum ContentType_BYTES {
        GEOMETRY
        GEOMETRY_VALUE
        JSON
        JSON_VALUE
        XML
        XML_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      enum ContentType_DATETIME {
        DATE
        DATETIME
        DATETIME_VALUE
        DATE_VALUE
        VALUES
        internalValueMap
        value
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchDone {
          {static} + PARSER : Parser<FetchDone>
          {static} - DEFAULT_INSTANCE : FetchDone
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - FetchDone()
          - FetchDone()
          - FetchDone()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchDone.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParams {
          {static} + PARSER : Parser<FetchDoneMoreOutParams>
          {static} - DEFAULT_INSTANCE : FetchDoneMoreOutParams
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - FetchDoneMoreOutParams()
          - FetchDoneMoreOutParams()
          - FetchDoneMoreOutParams()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParams.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParamsOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsets {
          {static} + PARSER : Parser<FetchDoneMoreResultsets>
          {static} - DEFAULT_INSTANCE : FetchDoneMoreResultsets
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - FetchDoneMoreResultsets()
          - FetchDoneMoreResultsets()
          - FetchDoneMoreResultsets()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsets.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsetsOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspended {
          {static} + PARSER : Parser<FetchSuspended>
          {static} - DEFAULT_INSTANCE : FetchSuspended
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - FetchSuspended()
          - FetchSuspended()
          - FetchSuspended()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspended.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspendedOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.Row {
          {static} + FIELD_FIELD_NUMBER : int
          {static} + PARSER : Parser<Row>
          {static} - DEFAULT_INSTANCE : Row
          - field_ : List<ByteString>
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getField()
          + getFieldCount()
          + getFieldList()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Row()
          - Row()
          - Row()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxResultset.Row.Builder {
          - bitField0_ : int
          - field_ : List<ByteString>
          + addAllField()
          + addField()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getField()
          + getFieldCount()
          + getFieldList()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureFieldIsMutable()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxResultset.RowOrBuilder {
          {abstract} + getField()
          {abstract} + getFieldCount()
          {abstract} + getFieldList()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Session_AuthenticateContinue_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Session_AuthenticateContinue_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Session_AuthenticateOk_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Session_AuthenticateOk_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Session_AuthenticateStart_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Session_AuthenticateStart_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Session_Close_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Session_Close_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Session_Reset_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Session_Reset_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxSession()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinue {
          {static} + AUTH_DATA_FIELD_NUMBER : int
          {static} + PARSER : Parser<AuthenticateContinue>
          {static} - DEFAULT_INSTANCE : AuthenticateContinue
          - authData_ : ByteString
          - bitField0_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getAuthData()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasAuthData()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - AuthenticateContinue()
          - AuthenticateContinue()
          - AuthenticateContinue()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinue.Builder {
          - authData_ : ByteString
          - bitField0_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearAuthData()
          + clearField()
          + clearOneof()
          + clone()
          + getAuthData()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + hasAuthData()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setAuthData()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinueOrBuilder {
          {abstract} + getAuthData()
          {abstract} + hasAuthData()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOk {
          {static} + AUTH_DATA_FIELD_NUMBER : int
          {static} + PARSER : Parser<AuthenticateOk>
          {static} - DEFAULT_INSTANCE : AuthenticateOk
          - authData_ : ByteString
          - bitField0_ : int
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getAuthData()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasAuthData()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - AuthenticateOk()
          - AuthenticateOk()
          - AuthenticateOk()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOk.Builder {
          - authData_ : ByteString
          - bitField0_ : int
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearAuthData()
          + clearField()
          + clearOneof()
          + clone()
          + getAuthData()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + hasAuthData()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setAuthData()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOkOrBuilder {
          {abstract} + getAuthData()
          {abstract} + hasAuthData()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStart {
          {static} + AUTH_DATA_FIELD_NUMBER : int
          {static} + INITIAL_RESPONSE_FIELD_NUMBER : int
          {static} + MECH_NAME_FIELD_NUMBER : int
          {static} + PARSER : Parser<AuthenticateStart>
          {static} - DEFAULT_INSTANCE : AuthenticateStart
          - authData_ : ByteString
          - bitField0_ : int
          - initialResponse_ : ByteString
          - mechName_ : Object
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          + getAuthData()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getInitialResponse()
          + getMechName()
          + getMechNameBytes()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasAuthData()
          + hasInitialResponse()
          + hasMechName()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - AuthenticateStart()
          - AuthenticateStart()
          - AuthenticateStart()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStart.Builder {
          - authData_ : ByteString
          - bitField0_ : int
          - initialResponse_ : ByteString
          - mechName_ : Object
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearAuthData()
          + clearField()
          + clearInitialResponse()
          + clearMechName()
          + clearOneof()
          + clone()
          + getAuthData()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getInitialResponse()
          + getMechName()
          + getMechNameBytes()
          + hasAuthData()
          + hasInitialResponse()
          + hasMechName()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setAuthData()
          + setField()
          + setInitialResponse()
          + setMechName()
          + setMechNameBytes()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStartOrBuilder {
          {abstract} + getAuthData()
          {abstract} + getInitialResponse()
          {abstract} + getMechName()
          {abstract} + getMechNameBytes()
          {abstract} + hasAuthData()
          {abstract} + hasInitialResponse()
          {abstract} + hasMechName()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.Close {
          {static} + PARSER : Parser<Close>
          {static} - DEFAULT_INSTANCE : Close
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Close()
          - Close()
          - Close()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.Close.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxSession.CloseOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.Reset {
          {static} + KEEP_OPEN_FIELD_NUMBER : int
          {static} + PARSER : Parser<Reset>
          {static} - DEFAULT_INSTANCE : Reset
          - bitField0_ : int
          - keepOpen_ : boolean
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getKeepOpen()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hasKeepOpen()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - Reset()
          - Reset()
          - Reset()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSession.Reset.Builder {
          - bitField0_ : int
          - keepOpen_ : boolean
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearKeepOpen()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getKeepOpen()
          + hasKeepOpen()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setKeepOpen()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxSession.ResetOrBuilder {
          {abstract} + getKeepOpen()
          {abstract} + hasKeepOpen()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSql {
          {static} - descriptor : FileDescriptor
          {static} - internal_static_Mysqlx_Sql_StmtExecuteOk_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Sql_StmtExecuteOk_fieldAccessorTable : FieldAccessorTable
          {static} - internal_static_Mysqlx_Sql_StmtExecute_descriptor : Descriptor
          {static} - internal_static_Mysqlx_Sql_StmtExecute_fieldAccessorTable : FieldAccessorTable
          {static} + getDescriptor()
          {static} + registerAllExtensions()
          {static} + registerAllExtensions()
          - MysqlxSql()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSql.StmtExecute {
          {static} + ARGS_FIELD_NUMBER : int
          {static} + COMPACT_METADATA_FIELD_NUMBER : int
          {static} + NAMESPACE_FIELD_NUMBER : int
          {static} + PARSER : Parser<StmtExecute>
          {static} + STMT_FIELD_NUMBER : int
          {static} - DEFAULT_INSTANCE : StmtExecute
          - args_ : List<Any>
          - bitField0_ : int
          - compactMetadata_ : boolean
          - memoizedIsInitialized : byte
          - namespace_ : Object
          {static} - serialVersionUID : long
          - stmt_ : ByteString
          + equals()
          + getArgs()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCompactMetadata()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getNamespace()
          + getNamespaceBytes()
          + getParserForType()
          + getSerializedSize()
          + getStmt()
          + getUnknownFields()
          + hasCompactMetadata()
          + hasNamespace()
          + hasStmt()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - StmtExecute()
          - StmtExecute()
          - StmtExecute()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSql.StmtExecute.Builder {
          - argsBuilder_ : RepeatedFieldBuilderV3<Any, Builder, AnyOrBuilder>
          - args_ : List<Any>
          - bitField0_ : int
          - compactMetadata_ : boolean
          - namespace_ : Object
          - stmt_ : ByteString
          + addAllArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgs()
          + addArgsBuilder()
          + addArgsBuilder()
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearArgs()
          + clearCompactMetadata()
          + clearField()
          + clearNamespace()
          + clearOneof()
          + clearStmt()
          + clone()
          + getArgs()
          + getArgsBuilder()
          + getArgsBuilderList()
          + getArgsCount()
          + getArgsList()
          + getArgsOrBuilder()
          + getArgsOrBuilderList()
          + getCompactMetadata()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + getNamespace()
          + getNamespaceBytes()
          + getStmt()
          + hasCompactMetadata()
          + hasNamespace()
          + hasStmt()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + removeArgs()
          + setArgs()
          + setArgs()
          + setCompactMetadata()
          + setField()
          + setNamespace()
          + setNamespaceBytes()
          + setRepeatedField()
          + setStmt()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - ensureArgsIsMutable()
          - getArgsFieldBuilder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOk {
          {static} + PARSER : Parser<StmtExecuteOk>
          {static} - DEFAULT_INSTANCE : StmtExecuteOk
          - memoizedIsInitialized : byte
          {static} - serialVersionUID : long
          + equals()
          {static} + getDefaultInstance()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getParserForType()
          + getSerializedSize()
          + getUnknownFields()
          + hashCode()
          + isInitialized()
          {static} + newBuilder()
          {static} + newBuilder()
          + newBuilderForType()
          {static} + parseDelimitedFrom()
          {static} + parseDelimitedFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parseFrom()
          {static} + parser()
          + toBuilder()
          + writeTo()
          # internalGetFieldAccessorTable()
          # newBuilderForType()
          - StmtExecuteOk()
          - StmtExecuteOk()
          - StmtExecuteOk()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      class com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOk.Builder {
          + addRepeatedField()
          + build()
          + buildPartial()
          + clear()
          + clearField()
          + clearOneof()
          + clone()
          + getDefaultInstanceForType()
          {static} + getDescriptor()
          + getDescriptorForType()
          + isInitialized()
          + mergeFrom()
          + mergeFrom()
          + mergeFrom()
          + mergeUnknownFields()
          + setField()
          + setRepeatedField()
          + setUnknownFields()
          # internalGetFieldAccessorTable()
          - Builder()
          - Builder()
          - maybeForceBuilderInitialization()
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOkOrBuilder {
      }
    }
  }
  

  namespace com.mysql.cj {
    namespace x.protobuf {
      interface com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOrBuilder {
          {abstract} + getArgs()
          {abstract} + getArgsCount()
          {abstract} + getArgsList()
          {abstract} + getArgsOrBuilder()
          {abstract} + getArgsOrBuilderList()
          {abstract} + getCompactMetadata()
          {abstract} + getNamespace()
          {abstract} + getNamespaceBytes()
          {abstract} + getStmt()
          {abstract} + hasCompactMetadata()
          {abstract} + hasNamespace()
          {abstract} + hasStmt()
      }
    }
  }
  

  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.ClientMessages
  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.ClientMessagesOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.Error
  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.ErrorOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.Ok
  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.OkOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.ServerMessages
  com.mysql.cj.x.protobuf.Mysqlx +-down- com.mysql.cj.x.protobuf.Mysqlx.ServerMessagesOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.ClientMessages .up.|> com.mysql.cj.x.protobuf.Mysqlx.ClientMessagesOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.ClientMessages +-down- com.mysql.cj.x.protobuf.Mysqlx.ClientMessages.Builder
  com.mysql.cj.x.protobuf.Mysqlx.ClientMessages +-down- com.mysql.cj.x.protobuf.Mysqlx.ClientMessages.Type
  com.mysql.cj.x.protobuf.Mysqlx.ClientMessages.Builder .up.|> com.mysql.cj.x.protobuf.Mysqlx.ClientMessagesOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.ClientMessages.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.Mysqlx.Error .up.|> com.mysql.cj.x.protobuf.Mysqlx.ErrorOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.Error +-down- com.mysql.cj.x.protobuf.Mysqlx.Error.Builder
  com.mysql.cj.x.protobuf.Mysqlx.Error +-down- com.mysql.cj.x.protobuf.Mysqlx.Error.Severity
  com.mysql.cj.x.protobuf.Mysqlx.Error.Builder .up.|> com.mysql.cj.x.protobuf.Mysqlx.ErrorOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.Error.Severity .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.Mysqlx.Ok .up.|> com.mysql.cj.x.protobuf.Mysqlx.OkOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.Ok +-down- com.mysql.cj.x.protobuf.Mysqlx.Ok.Builder
  com.mysql.cj.x.protobuf.Mysqlx.Ok.Builder .up.|> com.mysql.cj.x.protobuf.Mysqlx.OkOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.ServerMessages .up.|> com.mysql.cj.x.protobuf.Mysqlx.ServerMessagesOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.ServerMessages +-down- com.mysql.cj.x.protobuf.Mysqlx.ServerMessages.Builder
  com.mysql.cj.x.protobuf.Mysqlx.ServerMessages +-down- com.mysql.cj.x.protobuf.Mysqlx.ServerMessages.Type
  com.mysql.cj.x.protobuf.Mysqlx.ServerMessages.Builder .up.|> com.mysql.cj.x.protobuf.Mysqlx.ServerMessagesOrBuilder
  com.mysql.cj.x.protobuf.Mysqlx.ServerMessages.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.Capabilities
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGet
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSet
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.Capability
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilityOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.Close
  com.mysql.cj.x.protobuf.MysqlxConnection +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.Capabilities .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.Capabilities +-down- com.mysql.cj.x.protobuf.MysqlxConnection.Capabilities.Builder
  com.mysql.cj.x.protobuf.MysqlxConnection.Capabilities.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGet .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGet +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGet.Builder
  com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGet.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesGetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSet .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSet +-down- com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSet.Builder
  com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSet.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilitiesSetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.Capability .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilityOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.Capability +-down- com.mysql.cj.x.protobuf.MysqlxConnection.Capability.Builder
  com.mysql.cj.x.protobuf.MysqlxConnection.Capability.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CapabilityOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.Close .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxConnection.Close +-down- com.mysql.cj.x.protobuf.MysqlxConnection.Close.Builder
  com.mysql.cj.x.protobuf.MysqlxConnection.Close.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxConnection.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Collection
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.CollectionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Column
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ColumnOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.CreateView
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.CreateViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.DataModel
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Delete
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.DeleteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.DropView
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.DropViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Find
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.FindOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Insert
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.InsertOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Limit
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.LimitExpr
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.LimitExprOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.LimitOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ModifyView
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ModifyViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Order
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.OrderOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Projection
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ProjectionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Update
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperationOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ViewAlgorithm
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ViewCheckOption
  com.mysql.cj.x.protobuf.MysqlxCrud +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ViewSqlSecurity
  com.mysql.cj.x.protobuf.MysqlxCrud.Collection .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.CollectionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Collection +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Collection.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Collection.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.CollectionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Column .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.ColumnOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Column +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Column.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Column.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.ColumnOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.CreateView .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.CreateViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.CreateView +-down- com.mysql.cj.x.protobuf.MysqlxCrud.CreateView.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.CreateView.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.CreateViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.DataModel .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCrud.Delete .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.DeleteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Delete +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Delete.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Delete.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.DeleteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.DropView .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.DropViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.DropView +-down- com.mysql.cj.x.protobuf.MysqlxCrud.DropView.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.DropView.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.DropViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Find .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.FindOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Find +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Find.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Find +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Find.RowLock
  com.mysql.cj.x.protobuf.MysqlxCrud.Find +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Find.RowLockOptions
  com.mysql.cj.x.protobuf.MysqlxCrud.Find.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.FindOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Find.RowLock .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCrud.Find.RowLockOptions .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.InsertOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Insert.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRow
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRowOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.InsertOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRow .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRowOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRow +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRow.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRow.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.Insert.TypedRowOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Limit .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.LimitOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Limit +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Limit.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Limit.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.LimitOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.LimitExpr .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.LimitExprOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.LimitExpr +-down- com.mysql.cj.x.protobuf.MysqlxCrud.LimitExpr.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.LimitExpr.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.LimitExprOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.ModifyView .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.ModifyViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.ModifyView +-down- com.mysql.cj.x.protobuf.MysqlxCrud.ModifyView.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.ModifyView.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.ModifyViewOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Order .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.OrderOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Order +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Order.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Order +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Order.Direction
  com.mysql.cj.x.protobuf.MysqlxCrud.Order.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.OrderOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Order.Direction .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCrud.Projection .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.ProjectionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Projection +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Projection.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Projection.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.ProjectionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Update .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.Update +-down- com.mysql.cj.x.protobuf.MysqlxCrud.Update.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.Update.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperationOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation +-down- com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation.Builder
  com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation +-down- com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation.UpdateType
  com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperationOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCrud.UpdateOperation.UpdateType .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCrud.ViewAlgorithm .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCrud.ViewCheckOption .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCrud.ViewSqlSecurity .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxCursor +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Close
  com.mysql.cj.x.protobuf.MysqlxCursor +-down- com.mysql.cj.x.protobuf.MysqlxCursor.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Fetch
  com.mysql.cj.x.protobuf.MysqlxCursor +-down- com.mysql.cj.x.protobuf.MysqlxCursor.FetchOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Open
  com.mysql.cj.x.protobuf.MysqlxCursor +-down- com.mysql.cj.x.protobuf.MysqlxCursor.OpenOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Close .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Close +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Close.Builder
  com.mysql.cj.x.protobuf.MysqlxCursor.Close.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Fetch .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.FetchOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Fetch +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Fetch.Builder
  com.mysql.cj.x.protobuf.MysqlxCursor.Fetch.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.FetchOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.OpenOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Open.Builder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage
  com.mysql.cj.x.protobuf.MysqlxCursor.Open +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessageOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.OpenOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessageOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage.Builder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage +-down- com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage.Type
  com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessageOrBuilder
  com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Any
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.AnyOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Array
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.ArrayOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Object
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.ObjectOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar
  com.mysql.cj.x.protobuf.MysqlxDatatypes +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.ScalarOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Any .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.AnyOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Any +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Any.Builder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Any +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Any.Type
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Any.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.AnyOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Any.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Array .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.ArrayOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Array +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Array.Builder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Array.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.ArrayOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.ObjectOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.Builder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectField
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectFieldOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.ObjectOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectField .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectFieldOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectField +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectField.Builder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectField.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.Object.ObjectFieldOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.ScalarOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Builder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Octets
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.OctetsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.StringOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Type
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.ScalarOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Octets .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.OctetsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Octets +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Octets.Builder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Octets.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.OctetsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.StringOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String +-down- com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String.Builder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.StringOrBuilder
  com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxExpect +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Close
  com.mysql.cj.x.protobuf.MysqlxExpect +-down- com.mysql.cj.x.protobuf.MysqlxExpect.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open
  com.mysql.cj.x.protobuf.MysqlxExpect +-down- com.mysql.cj.x.protobuf.MysqlxExpect.OpenOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Close .up.|> com.mysql.cj.x.protobuf.MysqlxExpect.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Close +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Close.Builder
  com.mysql.cj.x.protobuf.MysqlxExpect.Close.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpect.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open .up.|> com.mysql.cj.x.protobuf.MysqlxExpect.OpenOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open.Builder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition
  com.mysql.cj.x.protobuf.MysqlxExpect.Open +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open.ConditionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open.CtxOperation
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpect.OpenOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition .up.|> com.mysql.cj.x.protobuf.MysqlxExpect.Open.ConditionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition.Builder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition.ConditionOperation
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition +-down- com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition.Key
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpect.Open.ConditionOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition.ConditionOperation .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.Condition.Key .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxExpect.Open.CtxOperation .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Array
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.ArrayOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifier
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifierOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItemOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Expr
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.ExprOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCall
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCallOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Identifier
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.IdentifierOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Object
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.ObjectOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Operator
  com.mysql.cj.x.protobuf.MysqlxExpr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.OperatorOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Array .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ArrayOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Array +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Array.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.Array.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ArrayOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifier .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifierOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifier +-down- com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifier.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifier.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ColumnIdentifierOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItemOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem +-down- com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem +-down- com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem.Type
  com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItemOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.DocumentPathItem.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxExpr.Expr .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ExprOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Expr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Expr.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.Expr +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Expr.Type
  com.mysql.cj.x.protobuf.MysqlxExpr.Expr.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ExprOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Expr.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCall .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCallOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCall +-down- com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCall.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCall.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.FunctionCallOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Identifier .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.IdentifierOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Identifier +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Identifier.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.Identifier.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.IdentifierOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Object .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ObjectOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Object +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Object.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.Object +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectField
  com.mysql.cj.x.protobuf.MysqlxExpr.Object +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectFieldOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Object.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.ObjectOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectField .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectFieldOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectField +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectField.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectField.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.Object.ObjectFieldOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Operator .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.OperatorOrBuilder
  com.mysql.cj.x.protobuf.MysqlxExpr.Operator +-down- com.mysql.cj.x.protobuf.MysqlxExpr.Operator.Builder
  com.mysql.cj.x.protobuf.MysqlxExpr.Operator.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxExpr.OperatorOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.Frame
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.FrameOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.ServerHello
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.ServerHelloOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChanged
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.Warning
  com.mysql.cj.x.protobuf.MysqlxNotice +-down- com.mysql.cj.x.protobuf.MysqlxNotice.WarningOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.Frame .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.FrameOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.Frame +-down- com.mysql.cj.x.protobuf.MysqlxNotice.Frame.Builder
  com.mysql.cj.x.protobuf.MysqlxNotice.Frame +-down- com.mysql.cj.x.protobuf.MysqlxNotice.Frame.Scope
  com.mysql.cj.x.protobuf.MysqlxNotice.Frame +-down- com.mysql.cj.x.protobuf.MysqlxNotice.Frame.Type
  com.mysql.cj.x.protobuf.MysqlxNotice.Frame.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.FrameOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.Frame.Scope .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxNotice.Frame.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged +-down- com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged.Builder
  com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged +-down- com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged.Type
  com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.GroupReplicationStateChanged.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxNotice.ServerHello .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.ServerHelloOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.ServerHello +-down- com.mysql.cj.x.protobuf.MysqlxNotice.ServerHello.Builder
  com.mysql.cj.x.protobuf.MysqlxNotice.ServerHello.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.ServerHelloOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged +-down- com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged.Builder
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged +-down- com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged.Parameter
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionStateChanged.Parameter .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChanged .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChanged +-down- com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChanged.Builder
  com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChanged.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.SessionVariableChangedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.Warning .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.WarningOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.Warning +-down- com.mysql.cj.x.protobuf.MysqlxNotice.Warning.Builder
  com.mysql.cj.x.protobuf.MysqlxNotice.Warning +-down- com.mysql.cj.x.protobuf.MysqlxNotice.Warning.Level
  com.mysql.cj.x.protobuf.MysqlxNotice.Warning.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxNotice.WarningOrBuilder
  com.mysql.cj.x.protobuf.MysqlxNotice.Warning.Level .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxPrepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate
  com.mysql.cj.x.protobuf.MysqlxPrepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.DeallocateOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Execute
  com.mysql.cj.x.protobuf.MysqlxPrepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.ExecuteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare
  com.mysql.cj.x.protobuf.MysqlxPrepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.PrepareOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.DeallocateOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate.Builder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.DeallocateOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Execute .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.ExecuteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Execute +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Execute.Builder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Execute.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.ExecuteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.PrepareOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.Builder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessageOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.PrepareOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessageOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage.Builder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage +-down- com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage.Type
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessageOrBuilder
  com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage.Type .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaDataOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.ContentType_BYTES
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.ContentType_DATETIME
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDone
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParams
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParamsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsets
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsetsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspended
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspendedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.Row
  com.mysql.cj.x.protobuf.MysqlxResultset +-down- com.mysql.cj.x.protobuf.MysqlxResultset.RowOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaDataOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData +-down- com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData.Builder
  com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData +-down- com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData.FieldType
  com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaDataOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.ColumnMetaData.FieldType .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxResultset.ContentType_BYTES .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxResultset.ContentType_DATETIME .up.|> com.google.protobuf.ProtocolMessageEnum
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDone .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDone +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDone.Builder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDone.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParams .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParamsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParams +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParams.Builder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParams.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreOutParamsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsets .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsetsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsets +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsets.Builder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsets.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchDoneMoreResultsetsOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspended .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspendedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspended +-down- com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspended.Builder
  com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspended.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.FetchSuspendedOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.Row .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.RowOrBuilder
  com.mysql.cj.x.protobuf.MysqlxResultset.Row +-down- com.mysql.cj.x.protobuf.MysqlxResultset.Row.Builder
  com.mysql.cj.x.protobuf.MysqlxResultset.Row.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxResultset.RowOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinue
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinueOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOk
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOkOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStart
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStartOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.Close
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.Reset
  com.mysql.cj.x.protobuf.MysqlxSession +-down- com.mysql.cj.x.protobuf.MysqlxSession.ResetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinue .up.|> com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinueOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinue +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinue.Builder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinue.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateContinueOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOk .up.|> com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOkOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOk +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOk.Builder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOk.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateOkOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStart .up.|> com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStartOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStart +-down- com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStart.Builder
  com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStart.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxSession.AuthenticateStartOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.Close .up.|> com.mysql.cj.x.protobuf.MysqlxSession.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.Close +-down- com.mysql.cj.x.protobuf.MysqlxSession.Close.Builder
  com.mysql.cj.x.protobuf.MysqlxSession.Close.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxSession.CloseOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.Reset .up.|> com.mysql.cj.x.protobuf.MysqlxSession.ResetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSession.Reset +-down- com.mysql.cj.x.protobuf.MysqlxSession.Reset.Builder
  com.mysql.cj.x.protobuf.MysqlxSession.Reset.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxSession.ResetOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSql +-down- com.mysql.cj.x.protobuf.MysqlxSql.StmtExecute
  com.mysql.cj.x.protobuf.MysqlxSql +-down- com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOk
  com.mysql.cj.x.protobuf.MysqlxSql +-down- com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOkOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSql +-down- com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSql.StmtExecute .up.|> com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSql.StmtExecute +-down- com.mysql.cj.x.protobuf.MysqlxSql.StmtExecute.Builder
  com.mysql.cj.x.protobuf.MysqlxSql.StmtExecute.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOk .up.|> com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOkOrBuilder
  com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOk +-down- com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOk.Builder
  com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOk.Builder .up.|> com.mysql.cj.x.protobuf.MysqlxSql.StmtExecuteOkOrBuilder


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
